import './App.css';
import React from 'react'
import { BrowserRouter as Router, Switch, Route, PrivateRoute} from 'react-router-dom'
import Home from './views/home/home.js';
import Login from './views/login/login';
import Register from './views/register/register';
import Logout from './views/logout/logout';
import MenuBar from './components/MenuBar/MenuBar'
import Dashboard from './views/dashboard/dashboard';
import MetinClient from './views/client/MetinClient';
import store from './store';
import { w3cwebsocket as W3CWebSocket } from 'websocket'


class App extends React.Component {
  constructor(props) {
    super(props)
    this.SocketToLocalServer = new W3CWebSocket('ws://localhost:13254')
    this.SocketToLocalServer.onmessage = this.OnMessage
  }

  OnMessage = (data) => {
    const cleared_data = JSON.parse(data.data)
    //console.log(cleared_data)

    if (cleared_data.type == 'information'){

      if (cleared_data.data.action == 'get_all_connected_metin_clients'){
        this.onReceiveMetinClients(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'get_full_character_status'){
        this.onReceiveCharacterStatus(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'get_full_instances_list'){
        //console.log(cleared_data.data.message)
        this.onReceiveInstancesList(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'get_full_hack_status'){
        //console.log(cleared_data.data.message)
        this.onReceiveHackStatus(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'set_full_server_status'){
        //console.log(cleared_data.data.message)
        this.onReceiveServerStatus(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'set_inventory_status'){
        console.log(cleared_data.data.message)
        this.onRevceiveInventoryStatus(cleared_data.data.message)
      }
      else if (cleared_data.data.action == 'set_pickup_filter'){
        this.OnReceivePickupFilter(cleared_data.data.message)
      }         
    }

  }

  onRevceiveInventoryStatus = (inventory_list) => {
    store.dispatch({type: 'set_inventory_status', payload: inventory_list})
  }
  OnReceivePickupFilter = (pickup_filter) => {
    store.dispatch({type: 'set_pickup_filter', payload: pickup_filter})
  }
  onReceiveMetinClients = (metin_clients_list) => {
    store.dispatch({type: 'set_metin_clients', payload: metin_clients_list})
    //console.log(store.getState())
  }

  onReceiveCharacterStatus = (character_status) => {
    store.dispatch({type: 'set_character_status', payload: character_status})
    //console.log(store.getState())
  }
  onReceiveInstancesList = (instances_list) => {
    store.dispatch({type: 'set_instances_list', payload: instances_list})
    //console.log(store.getState())
  }
  onReceiveHackStatus = (hack_status) => {
    store.dispatch({type: 'set_hack_status', payload: hack_status})
  }
  onReceiveServerStatus = (server_status) => {
    console.log(server_status)
    store.dispatch({type: 'set_full_server_status', payload: server_status})
  }

  reRender() {
    this.forceUpdate()
  }


  render () {
          return (
            <Router>
              <MenuBar/>
              <Switch>
                  <Route path='/client'><MetinClient socket={this.SocketToLocalServer}/></Route>
                  <Route path='/dashboard'> <Dashboard socket={this.SocketToLocalServer} clients={store.getState().receivePacketesReducer.clients}/> </Route>
                  <Route path='/logout'> <Logout _render={() => this.reRender()} /> </Route>
                  <Route path='/login'> <Login _render={() => this.reRender()}/></Route>
                  <Route path='/signup'> <Register/> </Route>
                  <Route exac path='/'> <Home/> </Route>
              </Switch>
            </Router>
          );
        }
}


export default App;
