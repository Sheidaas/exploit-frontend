import React from 'react'
import { connect }from 'react-redux'
import { Grid, Button, Paper, Select, MenuItem, Checkbox, FormControlLabel, Switch} from '@material-ui/core';
import map_a2 from '../../images/maps/map_a2.jpg'
import metin2_map_milgyo from '../../images/maps/metin2_map_milgyo.jpg'
import metin2_map_a1 from '../../images/maps/metin2_map_a1.jpg'
import metin2_map_a3 from '../../images/maps/metin2_map_a3.jpg'
import metin2_map_b1 from '../../images/maps/metin2_map_b1.jpg'
import metin2_map_b3 from '../../images/maps/metin2_map_b3.jpg'
import metin2_map_c1 from '../../images/maps/metin2_map_c1.jpg'
import metin2_map_c3 from '../../images/maps/metin2_map_c3.jpg'
import map_n_snowm_01 from '../../images/maps/map_n_snowm_01.jpg'
import metin2_map_n_desert_01 from '../../images/maps/metin2_map_n_desert_01.jpg'
import metin2_guild_village_01 from '../../images/maps/metin2_guild_village_01.jpg'
import metin2_guild_village_02 from '../../images/maps/metin2_guild_village_02.jpg'
import metin2_guild_village_03 from '../../images/maps/metin2_guild_village_02.jpg'
import metin2_map_BayBlackSand from '../../images/maps/metin2_map_BayBlackSand.jpg'
import Metin2_map_CapeDragonHead from '../../images/maps/Metin2_map_CapeDragonHead.jpg'
import metin2_map_dawnmist_dungeon_01 from '../../images/maps/metin2_map_dawnmist_dungeon_01.jpg'
import metin2_map_dawnmistwood from '../../images/maps/metin2_map_dawnmistwood.jpg'
import metin2_map_devilsCatacomb from '../../images/maps/metin2_map_devilsCatacomb.jpg'
import metin2_map_deviltower1 from '../../images/maps/metin2_map_deviltower1.jpg'
import metin2_map_guild_01 from '../../images/maps/metin2_map_guild_01.jpg'
import metin2_map_guild_02 from '../../images/maps/metin2_map_guild_02.jpg'
import metin2_map_guild_03 from '../../images/maps/metin2_map_guild_03.jpg'
import metin2_map_monkeydungeon_02 from '../../images/maps/metin2_map_monkeydungeon_02.jpg'
import metin2_map_monkeydungeon_03 from '../../images/maps/metin2_map_monkeydungeon_03.jpg'
import metin2_map_monkeydungeon from '../../images/maps/metin2_map_monkeydungeon.jpg'
import metin2_map_Mt_Th_dungeon_01 from '../../images/maps/metin2_map_Mt_Th_dungeon_01.jpg'
import metin2_map_n_flame_01 from '../../images/maps/metin2_map_n_flame_01.jpg'
import metin2_map_n_flame_dungeon_01 from '../../images/maps/metin2_map_n_flame_dungeon_01.jpg'
import metin2_map_n_snow_dungeon_01 from '../../images/maps/metin2_map_n_snow_dungeon_01.jpg'
import metin2_map_nusluck01 from '../../images/maps/metin2_map_nusluck01.jpg'
import metin2_map_privateshop from '../../images/maps/metin2_map_privateshop.jpg'
import metin2_map_skipia_dungeon_01 from '../../images/maps/metin2_map_skipia_dungeon_01.jpg'
import metin2_map_skipia_dungeon_02 from '../../images/maps/metin2_map_skipia_dungeon_02.jpg'
import metin2_map_spiderdungeon_02 from '../../images/maps/metin2_map_spiderdungeon_02.jpg'
import metin2_map_spiderdungeon_03 from '../../images/maps/metin2_map_spiderdungeon_03.jpg'
import metin2_map_spiderdungeon from '../../images/maps/metin2_map_spiderdungeon.jpg'
import metin2_map_Mt_Thunder from '../../images/maps/metin2_map_Mt_Thunder.jpg'
import metin2_map_trent from '../../images/maps/metin2_map_trent.jpg'
import metin2_map_trent02 from '../../images/maps/metin2_map_trent02.jpg'
import metin2_map_WL_01 from '../../images/maps/metin2_map_WL_01.jpg'
import metin2_map_e1 from '../../images/maps/metin2_map_e1.jpg'
import { Canvas, Rect, ButtonTypes, Circle, Text } from '@bucky24/react-canvas'
import {Map, LayerImage, Layer, LayerRaw} from '@bucky24/react-canvas-map'
import './metinclientmap.css'
import store from '../../store';
import { HackbarPaper, HackbarCheckbox, HackbarSelect, HackbarFormControlLabel, HackbarButton } from '../hackbar_style/hackbar_style.js'
import { ACTIONS } from '../../utils/enums.js'

class MetinClientMap extends React.Component {
    constructor(props){
        super(props)
        this.state = {
            scaleIndex: 0,
            scaleList: {0:[700, 1], 1:[500, 1], 2:[200, 1], 3:[75, 2]},
            showInstancesList: true,
            showFarmbotWaypoints: true,
            showWaithack: true,
            showPickup: true,
            instances: [],
            xOff:0,
            yOff:0,
            dimensions: {height: 0, width: 0},
            CurrentMap: 'None',
        }
    }
    onChangeScale = (action) => {
        if(action == 'previous'){
            if(this.state.scaleIndex+1>=Object.keys(this.state.scaleList).length){
                this.setState({
                    ...this.state,
                    scaleIndex: 0,});
            }
            else{
                this.setState({
                    ...this.state,
                    scaleIndex: this.state.scaleIndex+1,});
            }
        }
        else if(action == 'next'){
            if(this.state.scaleIndex-1<0){
                this.setState({
                    ...this.state,
                    scaleIndex: Object.keys(this.state.scaleList).length-1,});
            }
            else{
                this.setState({
                    ...this.state,
                    scaleIndex: this.state.scaleIndex-1,});
            }
        }
        this.forceUpdate()
        console.log(this.state.scaleIndex)


    }


    drawInstance = ({ x, y, width, height, id }) => {
        if(this.props.character_status.CurrentMap === this.state.CurrentMap){
            let color_to_display = "#f00"
            if(id.type == 1){
                color_to_display = '#00e11a'
            }
            else if(id.type == 3){
                color_to_display = '#1033df'
            }
            else if(id.type == 6){
                color_to_display = '#d9ff12'
            }
    
            return(<Rect 
                x={x}
                y={y} 
                x2={x+width} 
                y2={y+height} 
                color={color_to_display}
                fill={true}/>)
        }
        }


    drawFarmbotWaypoint = ({x, y, width, height, id}) => {
        //console.log(id)
        if(this.state.CurrentMap === id.instance[2]){
                return(
                    <>
                <Circle
                x={x}
                y={y}
                radius={width}
                color="#fff"
                fill={false}
                />
                <Text x={x-2} y={y} font='34px Times New Roman' color="#fff"> {id.id} </Text>
                </>
                )
            } 

        }

    drawWaithackRangeCircle = ({x, y, width, height, id}) => {
        if(this.props.character_status.CurrentMap === this.state.CurrentMap){
            return(
            <>
            <Circle
                x={x}
                y={y}
                radius={width}
                color="#f00"
                fill={false}
            />

            </>
            )
        }

    } 
    drawPickupRangeCircle = ({x, y, width, height, id}) => {
        if(this.props.character_status.CurrentMap === this.state.CurrentMap){
            return(<Circle
                x={x}
                y={y}
                radius={width}
                color="#fff"
                fill={false}
            />)
        }

    } 



    onMapClick = (x, y, button, rawX, rawY) => {
        let clicked_element = 0
        this.instances.every(element => {
            if(x>=element.cellX && y>=element.cellY && x<=element.cellX+element.cellWidth && y <= element.cellY+element.cellHeight){
                clicked_element = element
                return false
            }
            return true
        });

        if (clicked_element != 0){
            console.log(clicked_element)
        }
        else {
            if (button === ButtonTypes.LEFT){
                let encoder = new TextEncoder("utf-8")
                console.log('Going to ', x+this.xOff, y+this.yOff, this.state.CurrentMap)
                store.dispatch({type: ACTIONS.WALK_TO_POSITION, client: this.props.socket, index: [[(x+this.xOff)*100,(y+this.yOff)*100], this.state.CurrentMap], payload: {client_id: store.getState().receivePacketsReducer.selected_client_id}})
            }
            else if (button === ButtonTypes.RIGHT){
                console.log('tha')
                let farmbot_status = this.props.hack_status.FarmBot
                let new_path = farmbot_status.Path
                let point = [(x+this.xOff)*100,(y+this.yOff)*100, this.state.CurrentMap]
                new_path.push(point)

                let _module = {
                    ...farmbot_status,
                    Path: new_path,
                }
                console.log(_module)
                store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
        
            }

        }
    }

    loadCharacterCurrentMap = () => {
        let CurrentMap = this.props.character_status.CurrentMap
        let img = new Image();
        img.src = getMapByName(CurrentMap)
        //console.log(img.width, img.height)
        this.setState(
            {...this.state,
            dimensions:{height:img.height,
            width:img.width},
            CurrentMap: CurrentMap});
    }

    loadMapByName = (map_name) => {
        let CurrentMap = map_name
        let img = new Image();
        img.src = getMapByName(CurrentMap)
        //console.log(img.width, img.height)
        this.setState({...this.state,
            dimensions:{height:img.height,
            width:img.width},
            CurrentMap: CurrentMap,});
    }

    switchShowInstancesList = () => {
        this.setState({...this.state,
            showInstancesList: !this.state.showInstancesList});
    } 
    switchShowWaithackRange = () => {
        this.setState({...this.state,
            showWaithack: !this.state.showWaithack});
    } 
    switchShowPickupRange = () => {
        this.setState({...this.state,
            showPickup: !this.state.showPickup});
    } 
    switchShowFarmbotWaypoints = () => {
        this.setState({...this.state,
            showFarmbotWaypoints: !this.state.showFarmbotWaypoints});
    } 
    render = () => {
        if(this.props.character_status.CurrentMap && this.props.hack_status){
            this.instances = []
            this.farmbot_waypoints = []
            this.xOff=this.props.character_status.Position[0]/100-200
            this.yOff=this.props.character_status.Position[1]/100-200
            if (this.state.CurrentMap == 'None'){
                    this.loadCharacterCurrentMap()
                }
            
            let draw_instances_list = <> </>
            if(this.state.showInstancesList){
                this.props.instances_list.map(
                    (instance, i) => {
                   this.instances.push({cellX:Math.round(instance.x/100-this.xOff), cellY:Math.round(instance.y/100-this.yOff), cellWidth:2, cellHeight:2, id:instance})
               })
                draw_instances_list = <LayerRaw cells={this.instances} drawFunc={this.drawInstance} />
            }
            let farmbot_waypoints_list = <> </>
            if(this.state.showFarmbotWaypoints && this.props.hack_status.FarmBot.Path){
                this.props.hack_status.FarmBot.Path.map(
                    (instance, i) => {
                   this.farmbot_waypoints.push({cellX:Math.round(instance[0]/100-this.xOff), cellY:Math.round(instance[1]/100-this.yOff), cellWidth:3, cellHeight:2, id:{instance: instance, id:i+1}})
               })
               farmbot_waypoints_list = <LayerRaw cells={this.farmbot_waypoints} drawFunc={this.drawFarmbotWaypoint} />
            }
            let waithack_circle = <> </>
            if(this.state.showWaithack && this.props.hack_status){
                waithack_circle = <LayerRaw cells={[{cellX:this.props.character_status.Position[0]/100-this.xOff, cellY:this.props.character_status.Position[1]/100-this.yOff, cellWidth:this.props.hack_status.WaitHack.Range/100}]} drawFunc={this.drawWaithackRangeCircle} />
            }
            let pickup_circle = <> </>
            if(this.state.showPickup && this.props.hack_status){
                pickup_circle = <LayerRaw cells={[{cellX:this.props.character_status.Position[0]/100-this.xOff, cellY:this.props.character_status.Position[1]/100-this.yOff, cellWidth:this.props.hack_status.Settings.PickupRange/100}]} drawFunc={this.drawPickupRangeCircle} />
            }
            return (
                <Grid container className={'metin-client-map'}>
                    
                    <Canvas width={955} height={700}>
                    <Map x={10} y={10} zoomType={{type:'NONE'}} width={this.state.dimensions.width} height={this.state.dimensions.height}
                    cellSize={this.state.scaleList[this.state.scaleIndex][0]} zoom={this.state.scaleList[this.state.scaleIndex][1]}
                    minCellX={-this.xOff} minCellY={-this.yOff} maxCellX={this.state.dimensions.width-this.xOff}
                    maxCellY={this.state.dimensions.height-this.yOff}
                    onClick={(x, y, button, rawX, rawY) => this.onMapClick(x, y, button, rawX, rawY)} renderLayersToImage={true}>
                        <Layer>
                        <LayerImage xOff={-this.xOff} yOff={-this.yOff} src={getMapByName(this.state.CurrentMap)} x={0} y={0}
                                    width={this.state.dimensions.width} height={this.state.dimensions.height}>
                        </LayerImage>
                            {draw_instances_list}
                        </Layer>
                        <Layer>
                            {farmbot_waypoints_list}
                        </Layer>
                        <Layer>
                            {waithack_circle}
                        </Layer>
                        <Layer>
                            {pickup_circle}
                        </Layer>
                    </Map>
                    </Canvas>
                    <Grid container>
                    <HackbarPaper className='mapOptionManager'>
                        <Grid item xs={12}>
                            <HackbarSelect
                            value={this.state.CurrentMap}
                            onChange={(e) => this.loadMapByName(e.target.value)}
                            className={'select-map-client-map'}
                            >
                            <MenuItem value={this.props.character_status.CurrentMap}> Current Map </MenuItem>
                            <MenuItem value={this.props.character_status.FirstEmpireMap}> First Empire Map </MenuItem>
                            <MenuItem value={this.props.character_status.SecondEmpireMap}> Second Empire Map</MenuItem>
                            <MenuItem value={'metin2_map_a1'}> Red First City </MenuItem>
                            <MenuItem value={'metin2_map_a3'}> Red Second City </MenuItem>
                            <MenuItem value={'metin2_map_guild_01'}> Red Guild City </MenuItem>
                            <MenuItem value={'metin2_map_b1'}> Yellow First City </MenuItem>
                            <MenuItem value={'metin2_map_b3'}> Yellow Second City </MenuItem>
                            <MenuItem value={'metin2_map_guild_02'}> Yellow Guild City </MenuItem>
                            <MenuItem value={'metin2_map_c1'}> Blue First City </MenuItem>
                            <MenuItem value={'metin2_map_c3'}> Blue Second City </MenuItem>
                            <MenuItem value={'metin2_map_guild_03'}> Blue Guild City </MenuItem>
                            <MenuItem value={'map_a2'}> Orcs Valley </MenuItem>
                            <MenuItem value={'map_n_snowm_01'}> Sohan Mountain </MenuItem>
                            <MenuItem value={'metin2_map_n_desert_01'}> Yongbi Desert </MenuItem>
                            <MenuItem value={'metin2_map_n_flame_01'}> Fire Ground </MenuItem>
                            <MenuItem value={'metin2_map_monkeydungeon'}> Easy monkeys dungeon </MenuItem>
                            <MenuItem value={'metin2_map_monkeydungeon_02'}> Medium monkeys dungeon </MenuItem>
                            <MenuItem value={'metin2_map_monkeydungeon_03'}> Hard monkeys dungeon </MenuItem>
                            </HackbarSelect>
                        </Grid>
                        <Grid container>
                            <Grid item xs={4}>
                                <HackbarFormControlLabel labelPlacement='bottom' control={<HackbarCheckbox checked={this.state.showInstancesList} onChange={() => this.switchShowInstancesList()} name="Show instances" />}
                                                label={"Show mobs"} />
                                    
                            </Grid>
                            <Grid item xs={4}>
                                <HackbarFormControlLabel labelPlacement='bottom' control={<HackbarCheckbox checked={this.state.showWaithack} onChange={() => this.switchShowWaithackRange()} name="Show instances" />}
                                                label={"Show waithack"} />
                                    
                            </Grid>
                            <Grid item xs={4}>
                                <HackbarFormControlLabel labelPlacement='bottom' control={<HackbarCheckbox checked={this.state.showPickup} onChange={() => this.switchShowPickupRange()} name="Show instances" />}
                                                label={"Show pickup"} />
                                    
                            </Grid>
                        </Grid>

                            <Grid>
                                <HackbarButton onClick={() => this.onChangeScale('next')}> + </HackbarButton>
                                <HackbarButton onClick={() => this.onChangeScale('previous')}> - </HackbarButton>
                            </Grid>
                    </HackbarPaper>
                    </Grid>
                </Grid>

                
                )
        }
        return(
            <>
            Cannot load map :(
            </>
        )
        }
}

function getMapByName(map_name){
    if ( map_name == 'metin2_map_a1'){
        return metin2_map_a1
    }
    else if (map_name == 'metin2_map_a3'){
        return metin2_map_a3
    }
    else if (map_name == 'metin2_map_b1'){
        return metin2_map_b1
    }
    else if (map_name == 'metin2_map_b3'){
        return metin2_map_b3
    }
    else if ( map_name == 'metin2_map_c1'){
        return metin2_map_c1
    }   
    else if (map_name == 'metin2_map_c3'){
        return metin2_map_c3
    }   
    else if (map_name == 'map_a2'){
        return map_a2
    }    
    else if (map_name == 'map_n_snowm_01'){
        return map_n_snowm_01
    }
    else if (map_name == 'metin2_guild_village_01'){
        return metin2_guild_village_01
    }

    else if (map_name == 'metin2_guild_village_02'){
        return metin2_guild_village_02
    }
    else if (map_name == 'metin2_guild_village_02'){
        return metin2_guild_village_02
    }
    else if (map_name == 'metin2_guild_village_03'){
        return metin2_guild_village_03
    }
    else if (map_name == 'metin2_map_BayBlackSand'){
        return metin2_map_BayBlackSand
    }
    else if (map_name == 'Metin2_map_CapeDragonHead'){
        return Metin2_map_CapeDragonHead
    }
    else if (map_name == 'metin2_map_dawnmist_dungeon_01'){
        return metin2_map_dawnmist_dungeon_01
    }
    else if (map_name == 'metin2_map_dawnmistwood'){
        return metin2_map_dawnmistwood
    }
    else if (map_name == 'metin2_map_devilsCatacomb'){
        return metin2_map_devilsCatacomb
    }
    else if (map_name == 'metin2_map_deviltower1'){
        return metin2_map_deviltower1
    }
    else if (map_name == 'metin2_map_e1'){
        return metin2_map_e1
    }
    else if (map_name == 'metin2_map_guild_01'){
        return metin2_map_guild_01
    }
    else if (map_name == 'metin2_map_guild_02'){
        return metin2_map_guild_02
    }
    else if (map_name == 'metin2_map_guild_03'){
        return metin2_map_guild_03
    }
    else if (map_name == 'metin2_map_monkeydungeon_02'){
        return metin2_map_monkeydungeon_02
    }
    else if (map_name == 'metin2_map_monkeydungeon_03'){
        return metin2_map_monkeydungeon_03
    }
    else if (map_name == 'metin2_map_monkeydungeon'){
        return metin2_map_monkeydungeon
    }
    else if (map_name == 'metin2_map_Mt_Th_dungeon_01'){
        return metin2_map_Mt_Th_dungeon_01
    }
    else if (map_name == 'metin2_map_Mt_Thunder'){
        return metin2_map_Mt_Thunder
    }
    else if (map_name == 'metin2_map_n_desert_01'){
        return metin2_map_n_desert_01
    }
    else if (map_name == 'metin2_map_n_flame_01'){
        return metin2_map_n_flame_01
    }
    else if (map_name == 'metin2_map_n_flame_dungeon_01'){
        return metin2_map_n_flame_dungeon_01
    }
    else if (map_name == 'metin2_map_n_snow_dungeon_01'){
        return metin2_map_n_snow_dungeon_01
    }
    else if (map_name == 'metin2_map_nusluck01'){
        return metin2_map_nusluck01
    }
    else if (map_name == 'metin2_map_privateshop'){
        return metin2_map_privateshop
    }
    else if (map_name == 'metin2_map_skipia_dungeon_01'){
        return metin2_map_skipia_dungeon_01
    }
    else if (map_name == 'metin2_map_skipia_dungeon_02'){
        return metin2_map_skipia_dungeon_02
    }
    else if (map_name == 'metin2_map_spiderdungeon'){
        return metin2_map_spiderdungeon
    }
    else if (map_name == 'metin2_map_spiderdungeon_02'){
        return metin2_map_spiderdungeon_02
    }
    else if (map_name == 'metin2_map_spiderdungeon_03'){
        return metin2_map_spiderdungeon_03
    }
    else if (map_name == 'metin2_map_trent'){
        return metin2_map_trent
    }
    else if (map_name == 'metin2_map_trent02'){
        return metin2_map_trent02
    }
    else if (map_name == 'metin2_map_WL_01'){
        return metin2_map_WL_01
    }
    else if (map_name == 'metin2_map_milgyo'){
        return metin2_map_milgyo
    }
    else {
        return metin2_map_milgyo
    }
}

export default MetinClientMap