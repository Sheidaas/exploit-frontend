import React from 'react'
import { connect }from 'react-redux'
import { Grid, Button, Paper, Select, MenuItem, Checkbox, FormControlLabel} from '@material-ui/core';
import orcs_valley from '../../images/maps/map_a2.jpg'
import yellow_first_city from '../../images/maps/metin2_map_b1.jpg'
import metin2_map_milgyo from '../../images/maps/metin2_map_milgyo.jpg'
import metin2_map_c1 from '../../images/maps/metin2_map_c1.jpg'
import metin2_map_c3 from '../../images/maps/metin2_map_c3.jpg'
import { Canvas, Rect, ButtonTypes } from '@bucky24/react-canvas'
import {Map, LayerImage, Layer, LayerRaw} from '@bucky24/react-canvas-map'
import style from './style.css'
import store from '../../store';


class MetinClientMap extends React.Component {
    constructor(props){
        super(props)
        this.state = {
            scaleIndex: 0,
            scaleList: {0:[700, 1], 1:[500, 1], 2:[200, 1], 3:[75, 2]},
            showInstancesList: true,
            instances: [],
            xOff:0,
            yOff:0,
            dimensions: {height: 0, width: 0},
            CurrentMap: 'None',
        }
    }
    onChangeScale = (action) => {
        if(action == 'previous'){
            if(this.state.scaleIndex+1>=Object.keys(this.state.scaleList).length){
                this.setState({
                    scaleIndex: 0,
                    scaleList: this.state.scaleList,
                    dimensions:this.state.dimensions,
                    interval: this.state.interval,
                    CurrentMap: this.state.CurrentMap,
                    showInstancesList: this.state.showInstancesList});
            }
            else{
                this.setState({
                    scaleIndex: this.state.scaleIndex+1,
                    scaleList: this.state.scaleList,
                    dimensions:this.state.dimensions,
                    interval: this.state.interval,
                    CurrentMap: this.state.CurrentMap,
                    showInstancesList: this.state.showInstancesList});
            }
        }
        else if(action == 'next'){
            if(this.state.scaleIndex-1<0){
                this.setState({
                    scaleIndex: Object.keys(this.state.scaleList).length-1,
                    scaleList: this.state.scaleList,
                    dimensions:this.state.dimensions,
                    interval: this.state.interval,
                    CurrentMap: this.state.CurrentMap,
                    showInstancesList: this.state.showInstancesList});
            }
            else{
                this.setState({
                    scaleIndex: this.state.scaleIndex-1,
                    scaleList: this.state.scaleList,
                    dimensions:this.state.dimensions,
                    interval: this.state.interval,
                    CurrentMap: this.state.CurrentMap,
                    showInstancesList: this.state.showInstancesList});
            }
        }
        this.forceUpdate()
        console.log(this.state.scaleIndex)


    }


    drawInstance = ({ x, y, width, height, id }) => {

        let color_to_display = "#f00"
        if(id.type == 1){
            color_to_display = '#00e11a'
        }
        else if(id.type == 3){
            color_to_display = '#1033df'
        }
        else if(id.type == 6){
            color_to_display = '#d9ff12'
        }

        return(<Rect 
            x={x}
            y={y} 
            x2={x+width} 
            y2={y+height} 
            color={color_to_display}
            fill={true}/>)
    }

    onMapClick = (x, y, button, rawX, rawY) => {
        let clicked_element = 0
        this.instances.every(element => {
            if(x>=element.cellX && y>=element.cellY && x<=element.cellX+element.cellWidth && y <= element.cellY+element.cellHeight){
                clicked_element = element
                return false
            }
            return true
        });

        if (clicked_element != 0){
            console.log(clicked_element)
        }
        else {
            if (button === ButtonTypes.LEFT){
                console.log('Going to ', x+this.xOff, y+this.yOff, this.state.CurrentMap)
                store.dispatch({type: 'WALK_TO_POSITION', client: this.props.socket, index: [[x+this.xOff,y+this.yOff], this.state.CurrentMap], payload: {client_id: store.getState().receivePacketesReducer.selected_client_id}})
            }

        }
    }

    loadCharacterCurrentMap = () => {
        let CurrentMap = this.props.character_status.CurrentMap
        let img = new Image();
        img.src = getMapByName(CurrentMap)
        console.log(img.width, img.height)
        this.setState(
            {scaleIndex: this.state.scaleIndex,
            scaleList: this.state.scaleList,
            dimensions:{height:img.height,
            width:img.width},
            interval: this.state.interval,
            CurrentMap: CurrentMap,
            showInstancesList: this.state.showInstancesList});
    }

    loadMapByName = (map_name) => {
        let CurrentMap = map_name
        let img = new Image();
        img.src = getMapByName(CurrentMap)
        console.log(img.width, img.height)
        this.setState({scaleIndex: this.state.scaleIndex,
            scaleList: this.state.scaleList,
            dimensions:{height:img.height,
            width:img.width},
            interval: this.state.interval,
            CurrentMap: CurrentMap,
            showInstancesList: this.state.showInstancesList});
    }

    switchShowInstancesList = () => {
        this.setState({scaleIndex: this.state.scaleIndex,
            scaleList: this.state.scaleList,dimensions:this.state.dimensions,
            interval: this.state.interval,
            CurrentMap: this.state.CurrentMap,
            showInstancesList: !this.state.showInstancesList});
    } 

    render = () => {
        if(this.props.character_status.CurrentMap){
            this.instances = []
            this.xOff=this.props.character_status.Position[0]/100-200
            this.yOff=this.props.character_status.Position[1]/100-200
            this.props.instances_list.map(
                 (instance, i) => {
                this.instances.push({cellX:Math.round(instance.x/100-this.xOff), cellY:Math.round(instance.y/100-this.yOff), cellWidth:2, cellHeight:2, id:instance})
            })
            if (this.state.CurrentMap == 'None'){
                    this.loadCharacterCurrentMap()
                }
            
            let draw_instances_list = <> </>
            if(this.state.showInstancesList){
                draw_instances_list = <LayerRaw cells={this.instances} drawFunc={this.drawInstance} />
            }

            return (
                <Grid container className={'metin-client-map'}>
                    
                    <Canvas width={950} height={700}>
                    <Map x={10} y={10} zoomType={{type:'NONE'}} width={1000} height={1000} cellSize={this.state.scaleList[this.state.scaleIndex][0]} zoom={this.state.scaleList[this.state.scaleIndex][1]} minCellX={-this.xOff} minCellY={-this.yOff} maxCellX={this.state.dimensions.width-this.xOff} maxCellY={this.state.dimensions.height-this.yOff} onClick={(x, y, button, rawX, rawY) => this.onMapClick(x, y, button, rawX, rawY)}>
                        <Layer>
                        <LayerImage xOff={-this.xOff} yOff={-this.yOff} src={getMapByName(this.state.CurrentMap)} x={0} y={0}
                    width={this.state.dimensions.width} height={this.state.dimensions.height}>
                        </LayerImage>
                        {draw_instances_list}
                        </Layer>
                    </Map>
                    </Canvas>

                    <Paper className='mapOptionManager'>
                        <Grid>
                            Map :
                            <Select
                            value={this.state.CurrentMap}
                            onChange={(e) => this.loadMapByName(e.target.value)}
                            >
                            <MenuItem value={this.props.character_status.CurrentMap}> Current Map </MenuItem>
                            <MenuItem value={this.props.character_status.FirstEmpireMap}> First Empire Map </MenuItem>
                            <MenuItem value={this.props.character_status.SecondEmpireMap}> Second Empire Map</MenuItem>
                            </Select>
                        </Grid>

                            <Grid item>
                            <FormControlLabel control={<Checkbox checked={this.state.showInstancesList} onChange={() => this.switchShowInstancesList()} name="Show instances" />}
                                            label={"Show instances"} />
                                
                            </Grid>
                            <Grid>
                                <Button onClick={() => this.onChangeScale('next')}> + </Button>
                                <Button onClick={() => this.onChangeScale('previous')}> - </Button>
                            </Grid>
                    </Paper>



                    <Grid item xs={12}>
                            

                    
                            </Grid>
                            <Grid item xs={12}>
                            
                            </Grid>
                </Grid>

                
                )
        }
        return(
            <>
dgsfsgdf
            </>
        )
        }
}

function getMapByName(map_name){
    if ( map_name == 'metin2_map_c1'){
        return metin2_map_c1
    }
    else if (map_name == 'metin2_map_c3'){
        return metin2_map_c3
    }



    else if (map_name == 'metin2_map_a2'){
        return orcs_valley
    }
    else if (map_name == 'metin2_map_b1'){
        return yellow_first_city
    }
    else if (map_name == 'metin2_map_milgyo'){
        return metin2_map_milgyo
    }
    else {
        return orcs_valley
    }
}

function mapStateToProps(state){
    //console.log(state.receivePacketesReducer.character_status)
    return {
        instances_list: state.receivePacketesReducer.instances_list,
        character_status: state.receivePacketesReducer.character_status
    }
}

export default connect(mapStateToProps)(MetinClientMap)