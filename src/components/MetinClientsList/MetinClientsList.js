import React from "react"
import { Grid, Typography } from '@material-ui/core';
import blank_image from '../../images/blank-class-image.png'
import store from "../../store";
import { withRouter } from 'react-router-dom'
import { ACTIONS } from '../../utils/enums.js'
import {getNiceLookingStringFromMapName} from '../../utils/functions.js'

class MetinClientsList extends React.Component {
    constructor(props){
        super(props)
        
    }

    render () {
        let metin_clients_list = this.props.clients.map( (client, i) => {
            return <MetinClient client={client} id={i} history={this.props.history} socket={this.props.socket} language={this.props.language}/>
        })
        //console.log(metin_clients_list)
        return (
            metin_clients_list
        )
    }
}


class MetinClient extends React.Component {
    constructor(props){
        super(props)
    }

    handleClickOnClient = (client) => {
        let language = store.getState().languageReducer.language_type
        store.dispatch({type: ACTIONS.SELECT_CLIENT, payload: client})
        store.dispatch({type: ACTIONS.GET_FULL_SERVER_STATUS, payload: {client: this.props.socket, index: client.id, language: language}})
        const { history } = this.props;
        if(history) history.push('/client');
    }

    render = () => {
        if(this.props.client.player_name){
            return (
                <>
                <Grid container xs={12} className='metin-client' onClick={()=>this.handleClickOnClient(this.props.client)}>
                        <Grid item>
                            <img src={blank_image} width={250} className='metin-client-image' />
                        </Grid>
                        <Grid item>
                            <Typography> { this.props.client.player_name } {this.props.language.level} { this.props.client.player_level }</Typography>
                            <Typography> {this.props.language.current_map} { getNiceLookingStringFromMapName(this.props.client.player_curr_map) } </Typography>
                            <Typography> {this.props.language.position} ({ Math.round(this.props.client.player_position[0]/100) }, { Math.round(this.props.client.player_position[1]/100) }) </Typography>
                            <Typography> {this.props.language.exp} { this.props.client.player_experience }/{this.props.client.player_max_experience} {Math.round((this.props.client.player_experience/this.props.client.player_max_experience)*100)}%</Typography>
                        </Grid>
    
                </Grid>
                </>
            )
        }
        else{
            return null
        }
    }

}

export default withRouter(MetinClientsList) 