import React from 'react'
import { Paper, Grid, MenuItem, Select, AppBar, Tabs, Tab, Box, Typography, LinearProgress} from '@material-ui/core'
import store from '../../store'
import './metin_client_right_side.css'
import { HackbarAppBar, HackbarTabs, HackbarPaper } from '../hackbar_style/hackbar_style.js'
import Inventory from '../hacks/inventory'

function TabPanel(props) {
    const { children, value, index, ...other } = props;
  
    return (
      <div
        role="tabpanel"
        hidden={value !== index}
        id={`simple-tabpanel-${index}`}
        aria-labelledby={`simple-tab-${index}`}
        {...other}
      >
        {value === index && (
          <Box p={3}>
            {children}
          </Box>
        )}
      </div>
    );
  }
function a11yProps(index) {
    return {
      id: `simple-tab-${index}`,
      'aria-controls': `simple-tabpanel-${index}`,
    };
  }
  
class MetinClientRightSide extends React.Component {
    constructor(props){
        super(props)
        this.state={
            currentTab: 0
        }
    }

    onChangeCurrentTab = (e, new_tab) => {
        this.setState({
            currentTab: new_tab    
        })
    }

    render = () => {
            return (
                <Grid container className='metin-client-left-side-container'>
                    <Grid item xs={12}>
                        <HackbarAppBar position="static">
                            <HackbarTabs value={this.state.currentTab} onChange={ (e, new_value) => this.onChangeCurrentTab(e, new_value)}
                            variant="scrollable"
                            scrollButtons="auto"
                            aria-label="scrollable"
                            >
                                <Tab label="Character info" {...a11yProps}/>
                                <Tab label="Inventory" {...a11yProps}/>
                                <Tab label="Vids list" {...a11yProps}/>
    
                            </HackbarTabs>
                            <TabPanel value={this.state.currentTab} index={0}>
                                <CharacterInfo character_status={this.props.character_status}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={1}>
                                <Inventory socket={this.props.socket}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={1}>
                                asfd
                            </TabPanel>
                        </HackbarAppBar>
                    </Grid>
                </Grid>
            )
    }
}

class CharacterInfo extends React.Component {

    render = () => {
        if(Object.keys(this.props.character_status).length){
            return (
                <Grid container justifyContent="center">
                    <Grid item xs={12} >
                        <Typography className='character-info-text'> {this.props.character_status.Name}</Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <LinearProgress value={Math.round(this.props.character_status.HP / this.props.character_status.MaxHP * 100, 1)} variant='determinate' color='secondary'/>
                    </Grid>
                    <Grid item xs={12}>
                        <LinearProgress value={Math.round(this.props.character_status.SP / this.props.character_status.MaxSP * 100, 1)} variant='determinate'/>
                    </Grid>
                    <Grid item xs={12} >
                        <Typography className='character-info-text'> {this.props.character_status.Server}, channel {this.props.character_status.CurrentChannel}</Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <Typography className='character-info-text'> {this.props.character_status.CurrentMap}, {Math.round(this.props.character_status.Position[0]/100)}|{Math.round(this.props.character_status.Position[1]/100)}</Typography>
                    </Grid>
                </Grid>
            )
        }
        else{
            return (<>character status is not setted</>)
        }

    }
}

class MonstersList extends React.Component {

}



export default MetinClientRightSide