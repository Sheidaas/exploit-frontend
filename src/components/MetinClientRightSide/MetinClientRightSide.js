import React from 'react'
import { Grid, Tab, Box, Typography, ListItem, ListItemText} from '@material-ui/core'
import './metin_client_right_side.css'
import { HackbarAppBar, HackbarTabs, HackbarLinearProgress, HackbarYellowLinearProgress } from '../hackbar_style/hackbar_style.js'
import Inventory from '../hacks/inventory'
import { getNiceLookingStringFromMapName } from '../../utils/functions.js'
import { FixedSizeList } from 'react-window'
import { shouldComponentUpdate } from "react-window";

function TabPanel(props) {
    const { children, value, index, ...other } = props;
  
    return (
      <div
        role="tabpanel"
        hidden={value !== index}
        id={`simple-tabpanel-${index}`}
        aria-labelledby={`simple-tab-${index}`}
        {...other}
      >
        {value === index && (
          <Box p={2}>
            {children}
          </Box>
        )}
      </div>
    );
  }
function a11yProps(index) {
    return {
      id: `simple-tab-${index}`,
      'aria-controls': `simple-tabpanel-${index}`,
    };
  }
  
class MetinClientRightSide extends React.Component {
    constructor(props){
        super(props)
        this.state={
            currentTab: 0
        }
        this.shouldComponentUpdate = shouldComponentUpdate.bind(this)
    }

    onChangeCurrentTab = (e, new_tab) => {
        this.setState({
            currentTab: new_tab    
        })
    }

    render = () => {
            return (
                <Grid container className='metin-client-left-side-container'>
                    <Grid item xs={12}>
                        <HackbarAppBar position="static">
                            <HackbarTabs value={this.state.currentTab} onChange={ (e, new_value) => this.onChangeCurrentTab(e, new_value)}
                            variant="scrollable"
                            scrollButtons="auto"
                            aria-label="scrollable"
                            >
                                <Tab label={this.props.language.metinclientrightside.label_character_info} {...a11yProps}/>
                                <Tab label={this.props.language.metinclientrightside.label_inventory} {...a11yProps}/>
    
                            </HackbarTabs>
                            <TabPanel value={this.state.currentTab} index={0}>
                                <CharacterInfo character_status={this.props.character_status} language={this.props.language} skill_list={this.props.skill_list}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={1}>
                                <Inventory socket={this.props.socket} language={this.props.language.inventory} character_status={this.props.character_status}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={1}>
                                <> </>
                            </TabPanel>
                        </HackbarAppBar>
                    </Grid>
                </Grid>
            )
    }
}

class CharacterInfo extends React.Component {

    renderSkills = (props) => {
        const { index, style } = props;
        let keys = Object.keys(this.props.character_status.Skills)
        let skill = this.props.character_status.Skills[parseInt(keys[index])]
        if(!skill.grade){
            return (
                <Grid item xs={12}>
                <ListItem button key={index} style={style}>
                    <ListItemText primary={this.props.skill_list[skill.id].name + ', ' + skill.level} />
                </ListItem>
                </Grid>

            )
        }
        else if(skill.grade === 1){
            return (
                <Grid item xs={12}>
                    <ListItem button key={index} style={style}>
                        <ListItemText primary={skill.name + ', M' + skill.level} />
                    </ListItem> 
                </Grid>

            )
        }
        else if(skill.grade === 2){
            return (
                <Grid item xs={12}>
                <ListItem button key={index} style={style}>
                    <ListItemText primary={skill.name + ', G' + skill.level} />
                </ListItem>    
                </Grid>

            )
        }
        else if(skill.grade === 3){
            return (
                <Grid item xs={12}>
                <ListItem button key={index} style={style}>
                    <ListItemText primary={skill.name + ', P' + skill.level} />
                </ListItem>    
                </Grid>

            )
        }
    }

    render = () => {
        if(Object.keys(this.props.character_status).length){
            return (
                <Grid container justifyContent="center">
                    <Grid item xs={12} >
                        <Typography className='character-info-text'> {this.props.character_status.Name}, {this.props.language.metinclientrightside.level} {this.props.character_status.Level} </Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <HackbarLinearProgress value={Math.round(this.props.character_status.HP / this.props.character_status.MaxHP * 100, 1)} variant='determinate' color='secondary'/>
                    </Grid>
                    <Grid item xs={12}>
                        <HackbarLinearProgress value={Math.round(this.props.character_status.SP / this.props.character_status.MaxSP * 100, 1)} variant='determinate'/>
                    </Grid>
                    <Grid item xs={12}>
                        <HackbarYellowLinearProgress value={Math.round(this.props.character_status.Experience / this.props.character_status.MaxExperience * 100, 1)} variant='determinate'/>
                    </Grid>
                    <Grid item xs={12} >
                        <Typography className='character-info-text'> {this.props.character_status.Server}, {this.props.language.metinclientrightside.channel} {this.props.character_status.CurrentChannel}</Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <Typography className='character-info-text'> {getNiceLookingStringFromMapName(this.props.character_status.CurrentMap)}, {Math.round(this.props.character_status.Position[0]/100)}|{Math.round(this.props.character_status.Position[1]/100)}</Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <Typography className='character-info-text'> {this.props.language.metinclientrightside.vit}: {this.props.character_status.Vitality} | {this.props.language.metinclientrightside.int}: {this.props.character_status.Inteligence} | {this.props.language.metinclientrightside.str}: {this.props.character_status.Strength} | {this.props.language.metinclientrightside.dex}: {this.props.character_status.Dexterity}</Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <FixedSizeList height={450} width={'100%'} itemSize={40} itemCount={Object.keys(this.props.character_status.Skills).length} onChange={() => this.shouldComponentUpdate()}>
                            {this.renderSkills}
                        </FixedSizeList>
                    </Grid>
                </Grid>
            )
        }
        else{
            return (<>character status is not setted</>)
        }

    }
}

class MonstersList extends React.Component {

}



export default MetinClientRightSide