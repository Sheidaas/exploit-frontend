import { Grid, ListItem, ListItemText, Typography }           from '@material-ui/core'
import React                                                  from 'react'
import { FixedSizeList }                                      from 'react-window'
import { getNiceLookingStringFromMapName }                    from '../../utils/functions.js'
import { HackbarLinearProgress, HackbarYellowLinearProgress } from '../hackbar_style/hackbar_style.js'

class CharacterInfo extends React.Component {

    renderSkills = ( props ) => {
        const { index, style } = props;
        let keys = Object.keys(this.props.character_status.Skills)
        let skill = this.props.character_status.Skills[parseInt(keys[index])]
        if ( !skill.grade ) {
            return (
                <Grid item xs={ 12 }>
                    <ListItem button key={ index } style={ style }>
                        <ListItemText primary={ this.props.skill_list[skill.id].name + ', ' + skill.level }/>
                    </ListItem>
                </Grid>

            )
        } else if ( skill.grade === 1 ) {
            return (
                <Grid item xs={ 12 }>
                    <ListItem button key={ index } style={ style }>
                        <ListItemText primary={ this.props.skill_list[skill.id].name + ', M' + skill.level }/>
                    </ListItem>
                </Grid>

            )
        } else if ( skill.grade === 2 ) {
            return (
                <Grid item xs={ 12 }>
                    <ListItem button key={ index } style={ style }>
                        <ListItemText primary={ this.props.skill_list[skill.id].name + ', G' + skill.level }/>
                    </ListItem>
                </Grid>

            )
        } else if ( skill.grade === 3 ) {
            return (
                <Grid item xs={ 12 }>
                    <ListItem button key={ index } style={ style }>
                        <ListItemText primary={ this.props.skill_list[skill.id].name + ', P' + skill.level }/>
                    </ListItem>
                </Grid>

            )
        }
    }

    render = () => {
        if ( Object.keys(this.props.character_status).length ) {
            return (
                <Grid container justifyContent="center">
                    <Grid item xs={ 12 }>
                        <Typography
                            className='character-info-text'> { this.props.character_status.Name }, { this.props.language.metinclientrightside.level } { this.props.character_status.Level } </Typography>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <HackbarLinearProgress
                            value={ Math.round(this.props.character_status.HP / this.props.character_status.MaxHP * 100, 1) }
                            variant='determinate' color='secondary'/>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <HackbarLinearProgress
                            value={ Math.round(this.props.character_status.SP / this.props.character_status.MaxSP * 100, 1) }
                            variant='determinate'/>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <HackbarYellowLinearProgress
                            value={ Math.round(this.props.character_status.Experience / this.props.character_status.MaxExperience * 100, 1) }
                            variant='determinate'/>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <Typography
                            className='character-info-text'> { this.props.character_status.Server }, { this.props.language.metinclientrightside.channel } { this.props.character_status.CurrentChannel }</Typography>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <Typography
                            className='character-info-text'> { getNiceLookingStringFromMapName(this.props.character_status.CurrentMap) }, { Math.round(this.props.character_status.Position[0] / 100) }|{ Math.round(this.props.character_status.Position[1] / 100) }</Typography>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <Typography
                            className='character-info-text'> { this.props.language.metinclientrightside.vit }: { this.props.character_status.Vitality } | { this.props.language.metinclientrightside.int }: { this.props.character_status.Inteligence } | { this.props.language.metinclientrightside.str }: { this.props.character_status.Strength } | { this.props.language.metinclientrightside.dex }: { this.props.character_status.Dexterity }</Typography>
                    </Grid>
                    <Grid item xs={ 12 }>
                        <FixedSizeList height={ 450 } width={ '100%' } itemSize={ 40 }
                                       itemCount={ Object.keys(this.props.character_status.Skills).length }
                                       onChange={ () => this.shouldComponentUpdate() }>
                            { this.renderSkills }
                        </FixedSizeList>
                    </Grid>
                </Grid>
            )
        } else {
            return ( <>character status is not setted</> )
        }

    }
}

export default CharacterInfo