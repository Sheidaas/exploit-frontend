import { Button, Grid, ListItem, ListItemText, Slider , makeStyles, useStyles, Typography, FormControlLabel, Checkbox, Select, Input, MenuItem, } from '@material-ui/core'
import React from 'react'
import { connect }from 'react-redux'
import store from '../../../store'
import { FixedSizeList } from 'react-window';
import { ACTIONS } from '../../../utils/enums.js'

class ActionBot extends React.Component{
    constructor(props){
        super(props)
    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.actionbot,
            Enabled: !this.props.actionbot.Enabled
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchAlwaysUseWaithack= () => {
        let _module = {
            ...this.props.actionbot,
            AlwaysUseWaithack: !this.props.actionbot.AlwaysUseWaithack
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchDontUseWaithack = () => {
        let _module = {
            ...this.props.actionbot,
            DontUseWaithack: !this.props.actionbot.DontUseWaithack
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    ClearActions = () => {
        let _module = {
            ...this.props.actionbot,
            ClearActions: true
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }

    ClearWaiters = () => {
        let _module = {
            ...this.props.actionbot,
            ClearWaiters: true
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }

    render_all_actions = (props) => {
        const { index, style } = props;
        return(
            <div className='action'>
                <ListItem button key={index} style={style}>
                    <ListItemText primary={`[${index+1}] ${this.props.actionbot.Actions[index].name}`} />
                </ListItem> 
            </div>
            )
    }

    render = () => {
        console.log(this.props.actionbot)
        return (
            <Grid container>
                <Typography> Actions list </Typography>
                <FixedSizeList height={200} width={'100%'} itemSize={46} itemCount={this.props.actionbot.Actions.length}>
                    {this.render_all_actions}
                </FixedSizeList>
                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label="Start"/>
                </Grid>
                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.AlwaysUseWaithack} onChange={ () => this.SwitchAlwaysUseWaithack()} name="mine"/>} label="Always use waithack"/>
                </Grid>
                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.DontUseWaithack} onChange={ () => this.SwitchDontUseWaithack()} name="mine"/>} label="Dont use waithack"/>
                </Grid>
                <Grid item xs={4}>
                    <Button onClick={() => this.ClearActions}> Clear Actions </Button>
                </Grid>
            </Grid>
            )
    }
}

export default ActionBot