import { Grid, ListItem, ListItemText, Typography, FormControlLabel, Checkbox, Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core'
import React from 'react'
import store from '../../../store'
import { FixedSizeList } from 'react-window';
import { ACTIONS } from '../../../utils/enums.js'
import { HackbarButton, HackbarAccordion } from '../../hackbar_style/hackbar_style.js'
import  EnergyBot from '../energybot/energybot'
import  AutoDemontower from '../autodemontower/autodemontower'

class ActionBot extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            expandedSchema: -1,
        }
    }

    switchExpandedSchema = (changed_schema) => {
        if(changed_schema === this.state.expandedSchema){
            this.setState({...this.state,
                 expandedSchema: -1})
            return
        }
        this.setState({...this.state,
            expandedSchema: changed_schema})
    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.actionbot,
            Enabled: !this.props.actionbot.Enabled
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchAlwaysUseWaithack= () => {
        let _module = {
            ...this.props.actionbot,
            AlwaysUseWaithack: !this.props.actionbot.AlwaysUseWaithack
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchDontUseWaithack = () => {
        let _module = {
            ...this.props.actionbot,
            DontUseWaithack: !this.props.actionbot.DontUseWaithack
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    ClearActions = () => {
        let _module = {
            ...this.props.actionbot,
            ClearActions: true
        }
        //console.log(_module)
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    ClearWaiters = () => {
        let _module = {
            ...this.props.actionbot,
            ClearWaiters: true
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ActionBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    render_all_actions = (props) => {
        const { index, style } = props;
        return(
            <div className='action'>
                <ListItem button key={index} style={style}>
                    <ListItemText primary={`[${index+1}] ${this.props.actionbot.Actions[index].name}`} />
                </ListItem> 
            </div>
            )
    }

    render_all_waiters = (props) => {
        const { index, style } = props;
        return(
            <div className='waiter'>
            <ListItem button key={index} style={style}>
                <ListItemText primary={`[${index+1}] ${this.props.actionbot.Waiters[index]}`} />
            </ListItem> 
        </div>
            )
    }
    render = () => {
        //console.log(this.props.actionbot)
        return (
            <Grid container>
                <Grid item xs={6}>
                <Typography> {this.props.language.action_list} </Typography>
                <FixedSizeList height={200} width={'100%'} itemSize={30} itemCount={this.props.actionbot.Actions.length}>
                    {this.render_all_actions}
                </FixedSizeList>
                </Grid>
                <Grid item xs={6}>
                <Typography> {this.props.language.waiter_list} </Typography>
                <FixedSizeList height={200} width={'100%'} itemSize={20} itemCount={this.props.actionbot.Waiters.length}>
                    {this.render_all_waiters}
                </FixedSizeList>
                </Grid>


                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label={this.props.language.label_start}/>
                </Grid>
                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.AlwaysUseWaithack} onChange={ () => this.SwitchAlwaysUseWaithack()} name="mine"/>} label={this.props.language.label_always_use_waithack}/>
                </Grid>
                <Grid item xs={4}>
                    <FormControlLabel control={<Checkbox checked={this.props.actionbot.DontUseWaithack} onChange={ () => this.SwitchDontUseWaithack()} name="mine"/>} label={this.props.language.dont_use_waithack}/>
                </Grid>
                <Grid item xs={6}>
                    <HackbarButton onClick={() => this.ClearActions()}> {this.props.language.clear_actions} </HackbarButton>
                </Grid>
                <Grid item xs={6}>
                    <HackbarButton onClick={() => this.ClearWaiters()}> {this.props.language.clear_waiters} </HackbarButton>
                </Grid>
                <Grid item xs={12}>
                    <Grid item xs={12}>
                        <Typography> {this.props.language.schema_runner_name} </Typography>
                    </Grid>
                    <HackbarAccordion expanded={this.state.expandedSchema === 0} onChange={() => this.switchExpandedSchema(0)}>
                        <AccordionSummary>
                            <Typography> {this.props.language.energy_bot_name} </Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                            <EnergyBot socket={this.props.socket} language={this.props.energy_bot_language}/>
                        </AccordionDetails>
                    </HackbarAccordion>
                    <HackbarAccordion expanded={this.state.expandedSchema === 1} onChange={() => this.switchExpandedSchema(1)}>
                        <AccordionSummary>
                            <Typography> {this.props.language.auto_demon_tower_name} </Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                            <AutoDemontower socket={this.props.socket} language={this.props.auto_demon_tower_language}/>
                        </AccordionDetails>
                    </HackbarAccordion>
                </Grid>
            </Grid>
            )
    }
}

export default ActionBot