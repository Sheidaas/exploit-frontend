import { Button, Grid, ListItem, List, ListItemText, Slider , makeStyles, useStyles, Typography, FormControlLabel, Checkbox, Select, TextField, MenuItem, } from '@material-ui/core'
import React from 'react'
import { connect }from 'react-redux'
import store from '../../../store'
import { HackbarCheckbox, HackbarSlider } from '../../hackbar_style/hackbar_style.js'
import { FixedSizeList } from 'react-window';


class Pickup extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            show_only_checked: false,
            item_filter: '',
            items_to_show: this.props.item_list
        }
        this.onPickupFilterChange = this.onChangeItemFilterName.bind(this)
    }
    onPickupSpeedChange = (event, new_pickup_speed) => {
        let _module = {
            ...this.props.settings,
            PickupSpeed: new_pickup_speed,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
           
    }
    onPickupRangeChange = (event, new_pickup_range) => {
        let _module = {
            ...this.props.settings,
            PickupRange: new_pickup_range*10,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
           
    }
    SwitchAvoidPlayersInPickup = () => {
        let _module = {
            ...this.props.settings,
            AvoidPlayersInPickup: !this.props.settings.AvoidPlayersInPickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchPickup = () => {
        let _module = {
            ...this.props.settings,
            Pickup: !this.props.settings.Pickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchExcludeInFilter = () => {
        let _module = {
            ...this.props.settings,
            ExcludeInFilter: !this.props.settings.ExcludeInFilter,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchUseRangePickup = () => {
        let _module = {
            ...this.props.settings,
            UseRangePickup: !this.props.settings.UseRangePickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchPickupItemFirst = () => {
        let _module = {
            ...this.props.settings,
            PickupItemFirst: !this.props.settings.PickupItemFirst,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchPickupIgnorePath = () => {
        let _module = {
            ...this.props.settings,
            PickupIgnorePath: !this.props.settings.PickupIgnorePath,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }  

    onChangeItemPickup = (item_id) => {
        console.log(this.props.settings.PickupFiltersID)
        if(this.props.settings.PickupFiltersID.includes(parseInt(item_id))){
            console.log(this.props.settings.PickupFiltersID.filter((item) => item !== item_id))
            let _module = {
                ...this.props.settings,
                PickupFiltersID: this.props.settings.PickupFiltersID.filter((item) => item !== item_id)
            }
            store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
        }
        else{
            let new_pickup_filter = this.props.settings.PickupFiltersID
            new_pickup_filter.push(item_id)
            let _module = {
                ...this.props.settings,
                PickupFiltersID: new_pickup_filter
            }
            store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
                    
        }
    this.onChangeItemFilterName(this.state.item_filter)
    }

    render_item_filter = (props) => {
        const { index, style } = props;
        let key = Object.keys(this.state.items_to_show)[index]
        let checked = false
        if(this.props.settings.PickupFiltersID.includes(parseInt(key))){
            checked = true
        }
        return(
            <div className='item'>
                <ListItem button key={index} style={style}>
                    <FormControlLabel control={<HackbarCheckbox checked={checked} onChange={ () => {this.onChangeItemPickup(parseInt(key))}} name="mine"/>} label={this.state.items_to_show[key].name} />
                </ListItem> 
            </div>
            )
    } 

    onChangeItemFilterName = (new_value) => {
        console.log(new_value)
        let filtered_list = {}
        for (const [key, value] of Object.entries(this.props.item_list)) {
            if(value.name.includes(new_value)){
                filtered_list[key] = value
            }
          }
        this.setState({
            items_to_show: filtered_list,
            item_filter: new_value,
        })
    }


    render = () => {
        let pickup_range_slider = () => {}
        if (this.props.settings.UseRangePickup){
            //console.log(this.props.settings)
            pickup_range_slider = () => {
                return(
                    <Grid item xs={12} className='item_slider'>
                    <Typography id="discrete-slider-small-steps" gutterBottom>
                        Pickup speed
                    </Typography>
                    <HackbarSlider
                    onChange={this.onPickupRangeChange}
                            defaultValue={Math.round(this.props.settings.PickupRange/10)}
                            aria-labelledby="discrete-slider-small-steps"
                            step={10}
                            marks={[{value: 300, label:'Recomm.'},{value: 500, label:'High'}]}
                            min={100}
                            max={800}
                            valueLabelDisplay="auto"
                        />
                </Grid>
                )
            }
        }
        return (
        <Grid container>

            <Grid container>
                <Grid item xs={12}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.Pickup} onChange={ () => this.SwitchPickup()} name="mine"/>} label="Enable pickup"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.ExcludeInFilter} onChange={ () => this.SwitchExcludeInFilter()} name="mine"/>} label="Exclude filter"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.AvoidPlayersInPickup} onChange={ () => this.SwitchAvoidPlayersInPickup()} name="mine"/>} label="Dont pickup if player is near"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.PickupIgnorePath} onChange={ () => this.SwitchPickupIgnorePath()} name="mine"/>} label="Ignore path"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.PickupItemFirst} onChange={ () => this.SwitchPickupItemFirst()} name="mine"/>} label="Pick item first"/>
                </Grid>
                <Grid item xs={12}>
                    <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.UseRangePickup} onChange={ () => this.SwitchUseRangePickup()} name="mine"/>} label="Use range pickup"/>
                    {pickup_range_slider()}
                </Grid>
                <Grid>
                    <Grid item xs={12} className='item_slider'>
                        <Typography id="discrete-slider-small-steps" gutterBottom>
                            Pickup speed
                        </Typography>
                        <HackbarSlider
                        onChange={this.onPickupSpeedChange}
                                defaultValue={Math.round(this.props.settings.PickupSpeed)}
                                aria-labelledby="discrete-slider-small-steps"
                                step={0.2}
                                marks={[{value: 1, label:'Recomm.'}]}                                                     
                                min={1}
                                max={3}
                                valueLabelDisplay="auto"
                            />
                    </Grid>
                </Grid>
                <Grid item xs={12}>
                    <Typography> Pickup list </Typography>
                </Grid>
                    <TextField label='Item filter' helperText='Type here items to pickup' type='text' value={this.state.item_filter} onChange={ (e)=> this.onPickupFilterChange(e.target.value) }></TextField>
                <Grid item xs={12}>
                    <FixedSizeList height={200} width={'100%'} itemSize={25} itemCount={Object.keys(this.state.items_to_show).length}>
                        {this.render_item_filter}
                    </FixedSizeList>
                </Grid>
            
            </Grid>

        
        </Grid>
        )
    }
}

function mapStateToProps(state){
    return {
        item_list: state.receivePacketesReducer.server_info.Items,
        settings: state.receivePacketesReducer.hack_status.Settings
    }
}

export default connect(mapStateToProps)(Pickup)