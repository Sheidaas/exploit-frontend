import { Button, Grid, ListItem, List, ListItemText, Slider , makeStyles, useStyles, Typography, FormControlLabel, Checkbox, Select, Input, MenuItem, } from '@material-ui/core'
import React from 'react'
import { connect }from 'react-redux'
import store from '../../../store'

class Pickup extends React.Component{
    constructor(props){
        super(props)
    }
    onPickupSpeedChange = (event, new_pickup_speed) => {
        let _module = {
            ...this.props.settings,
            PickupSpeed: new_pickup_speed,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
           
    }
    onPickupRangeChange = (event, new_pickup_range) => {
        let _module = {
            ...this.props.settings,
            PickupRange: new_pickup_range*10,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
           
    }
    SwitchAvoidPlayersInPickup = () => {
        let _module = {
            ...this.props.settings,
            AvoidPlayersInPickup: !this.props.settings.AvoidPlayersInPickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchPickup = () => {
        let _module = {
            ...this.props.settings,
            Pickup: !this.props.settings.Pickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchExcludeInFilter = () => {
        let _module = {
            ...this.props.settings,
            ExcludeInFilter: !this.props.settings.ExcludeInFilter,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    SwitchUseRangePickup = () => {
        let _module = {
            ...this.props.settings,
            UseRangePickup: !this.props.settings.UseRangePickup,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    render = () => {
        let pickup_range_slider = () => {}
        if (this.props.settings.UseRangePickup){
            pickup_range_slider = () => {
                return(
                    <Grid item xs={12} className='item_slider'>
                    <Typography id="discrete-slider-small-steps" gutterBottom>
                        Pickup speed
                    </Typography>
                    <Slider
                    onChange={this.onPickupRangeChange}
                            defaultValue={Math.round(this.props.settings.PickupRange/100)}
                            aria-labelledby="discrete-slider-small-steps"
                            step={10}
                            marks={[{value: 300, label:'Recomm.'},{value: 500, label:'High'}]}
                            min={100}
                            max={800}
                            valueLabelDisplay="on"
                        />
                </Grid>
                )
            }
        }
        return (
        <Grid container>

            <Grid container>
                <Grid item xs={12}>
                    <FormControlLabel control={<Checkbox checked={this.props.settings.Pickup} onChange={ () => this.SwitchPickup()} name="mine"/>} label="Enable pickup"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<Checkbox checked={this.props.settings.ExcludeInFilter} onChange={ () => this.SwitchExcludeInFilter()} name="mine"/>} label="Exclude filter"/>
                </Grid>
                <Grid item xs={6}>
                    <FormControlLabel control={<Checkbox checked={this.props.settings.AvoidPlayersInPickup} onChange={ () => this.SwitchAvoidPlayersInPickup()} name="mine"/>} label="Dont pickup if player is near"/>
                </Grid>
                <Grid item xs={12}>
                    <FormControlLabel control={<Checkbox checked={this.props.settings.UseRangePickup} onChange={ () => this.SwitchUseRangePickup()} name="mine"/>} label="Use range pickup"/>
                    {pickup_range_slider()}
                </Grid>
                <Grid>
                    <Grid item xs={12} className='item_slider'>
                        <Typography id="discrete-slider-small-steps" gutterBottom>
                            Pickup speed
                        </Typography>
                        <Slider
                        onChange={this.onPickupSpeedChange}
                                defaultValue={Math.round(this.props.settings.PickupSpeed)}
                                aria-labelledby="discrete-slider-small-steps"
                                step={0.2}
                                marks={[{value: 1, label:'Recomm.'}]}
                                min={1}
                                max={3}
                                valueLabelDisplay="auto"
                            />
                    </Grid>
                </Grid>
                <Grid item xs={12}>
                    <Typography> Pickup list </Typography>
                </Grid>
                <Grid item xs={12}>
                    <List>

                    </List>
                </Grid>
            
            </Grid>

        
        </Grid>
        )
    }
}

function mapStateToProps(state){
    //console.log(state.receivePacketesReducer.character_status)
    return {
        settings: state.receivePacketesReducer.hack_status.Settings
    }
}

export default connect(mapStateToProps)(Pickup)