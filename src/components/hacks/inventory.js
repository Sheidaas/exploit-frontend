import React from 'react'
import store from '../../store'
import { connect }from 'react-redux'
import { Typography, ListItem, Grid, FormControlLabel, Button, Menu, MenuItem } from '@material-ui/core';
import { FixedSizeList } from 'react-window'
import { HackbarAppBar, HackbarButton, HackbarCheckbox } from '../hackbar_style/hackbar_style.js'
import { shouldComponentUpdate } from "react-window";


class InventoryList extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            upgrade_menu: 0,
            selected_items: [],
            interval: setInterval(() => {
                this.getInventoryStatus()
              }, 500),
        }
        this.shouldComponentUpdate = shouldComponentUpdate.bind(this)
    }
    getInventoryStatus = () => {
        //this.setState({...this.state,
        //selected_items: []})
        let index = store.getState().receivePacketesReducer.selected_client_id
        store.dispatch({type: 'GET_INVENTORY_STATUS', client: this.props.socket, index: index})
    }

    componentWillUnmount = () => {
        clearInterval(this.state.interval);
    }

    onItemCheckboxChange = (_id) => {
        let new_items = this.state.selected_items
        if(new_items.includes(_id)){
            new_items = new_items.filter((element) => element !== _id)
        }
        else{
            new_items.push(_id)
        }

        this.setState({
            selected_items: new_items
        })
        this.forceUpdate()
    }

    render_inventory = (props) => {
        const { index, style } = props;
        let item = this.props.item_list[this.props.inventory[index].id]
        let _label = ''
        if(this.props.inventory[index].count>1){
            _label = item.name + ' (' + this.props.inventory[index].count + ' pieces)'
        }
        else{
            _label = item.name
        }
        let checked = false
        if(this.state.selected_items.includes(this.props.inventory[index].slot))   {
            checked = true
        }    
        return(
            <div className='item'>
                <ListItem button key={index} style={style}>
                    <FormControlLabel control={<HackbarCheckbox checked={checked} name="mine" onChange={() => this.onItemCheckboxChange(this.props.inventory[index].slot)}/>} label={_label} />
                </ListItem> 
            </div>
            )
    }

    OpenUpgradeMenu = (e) => {
        this.setState({...this.state,
            upgrade_menu: e.currentTarget,
        })
    }
    CloseUpgradeMenu = (number) => {
        this.setState({...this.state,
            upgrade_menu: 0,
        })
        if(!number){
            return
        }       
        else{
            let _module = {
                action: 'upgrade_items',
                items_list: this.state.selected_items,
                number_to_upgrade: number,
                mode: 0,
            }
            store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Inventory'}, index:store.getState().receivePacketesReducer.selected_client_id})
        }
    }

    SellAllItems = () => {
        let _module = {
            action: 'sell_all_items',
            items_list: this.state.selected_items,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Inventory'}, index:store.getState().receivePacketesReducer.selected_client_id})      
    }

    DropAllItems = () => {
        let _module = {
            action: 'drop_all_items',
            items_list: this.state.selected_items,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'Inventory'}, index:store.getState().receivePacketesReducer.selected_client_id})      
    }

    render = () => {
        let is_rendering_inventory = <> </>
        if (this.props.inventory.length){
            is_rendering_inventory = <>
                    <FixedSizeList height={450} width={'100%'} itemSize={40} itemCount={this.props.inventory.length} onChange={() => this.shouldComponentUpdate()}>
                        {this.render_inventory}
                    </FixedSizeList>
             </>
        }
        return(
                <Grid container>
                    <Grid item xs={12}>
                        {is_rendering_inventory}
                    </Grid>
                    <HackbarButton onClick={(e) => this.OpenUpgradeMenu(e)}>
                        Upgrade selected
                    </HackbarButton>
                    <Menu
                        id="simple-menu"
                        anchorEl={this.state.upgrade_menu}
                        keepMounted
                        open={Boolean(this.state.upgrade_menu)}
                        onClose={() => this.CloseUpgradeMenu(0)}
                    >
                        <MenuItem disabled>Number of upgrades </MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(1)}>1</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(2)}>2</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(3)}>3</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(4)}>4</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(5)}>5</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(6)}>6</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(7)}>7</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(8)}>8</MenuItem>
                        <MenuItem onClick={() => this.CloseUpgradeMenu(9)}>9</MenuItem>
                    </Menu>
                    <HackbarButton>
                        Sell selected
                    </HackbarButton>
                    <HackbarButton>
                        Drop selected
                    </HackbarButton>
                </Grid>

            )
    }
}

const mapStateToProps = (state) => {
    return {
        inventory: state.receivePacketesReducer.inventory,
        item_list: state.receivePacketesReducer.server_info.Items
    }
}

export default connect(mapStateToProps)(InventoryList)