import { ButtonGroup, Grid, ListItem, ListItemText, Typography } from "@material-ui/core";
import React                                                     from "react";
import { FixedSizeList }                                         from "react-window";
import store                                                     from "../../../store";
import { ACTIONS }                                               from "../../../utils/enums";
import { parseMoney }                                            from '../../../utils/functions'
import { HackbarButton }                                         from "../../hackbar_style/hackbar_style";

class MobShower extends React.Component {
    constructor( props ) {
        super(props)
    }

    componentDidMount = () => {
        this.onUnselectMob()
    }

    componentWillUnmount = () => {
        this.onUnselectMob()
    }

    buyItem = ( item ) => {
        let _module = {
            BUY_ITEMS: {
                ItemsToBuy: [ item ]
            }
        }// id of npc to open the shop
        console.log(_module)
        store.dispatch({
            type: ACTIONS.UPDATE_ONE_HACK_MODULE,
            client: this.props.socket,
            payload: { module_dict: _module, module_name: 'InstanceInteractions' },
            index: store.getState().receivePacketsReducer.selected_client_id
        })
    }

    onOpenShopClick = () => {
        let _module = {
            OPEN_SHOP: {
                NpcIdToOpen: this.props.instance.id
            }, // id of npc to open the shop
        }
        store.dispatch({
            type: ACTIONS.UPDATE_ONE_HACK_MODULE,
            client: this.props.socket,
            payload: { module_dict: _module, module_name: 'InstanceInteractions' },
            index: store.getState().receivePacketsReducer.selected_client_id
        })
    }

    onUnselectMob = () => {
        let _module = {
            CLOSE_SHOP: 0
        }
        store.dispatch({
            type: ACTIONS.UPDATE_ONE_HACK_MODULE,
            client: this.props.socket,
            payload: { module_dict: _module, module_name: 'InstanceInteractions' },
            index: store.getState().receivePacketsReducer.selected_client_id
        })
    }

    render_shop = ( props ) => {
        const { index, style } = props;
        let item = this.props.mob_shower.Shopper.ItemsInShop[index]

        let label = this.props.item_list[item.id].name + ' | ' + item.count + ' | ' + parseMoney(item.price)
        return (
            <ListItem button key={ index } style={ style } onClick={ () => {
                this.buyItem(item)
            } }>
                <ListItemText primary={ label }/>
            </ListItem>
        )
    }

    render = () => {
        //console.log(this.props)
        if ( !Object.keys(this.props.instance).length ) {
            return (
                <Grid container>
                    <Grid item xs={ 12 }>
                        { this.onUnselectMob() }
                    </Grid>
                </Grid>
            )
        }

        const shoppers_id = [ 9009, 9001, 9002, 9003 ]
        if ( this.props.instance.type === 1 ) {
            return (
                <Grid container>
                    { shoppers_id.includes(this.props.instance.id) &&
                    <>
                        { !this.props.mob_shower.Shopper.IsShopOpen
                          ? (
                              <Grid item xs={ 12 }>
                                  <ButtonGroup>
                                      <HackbarButton
                                          onClick={ () => this.onOpenShopClick() }> { this.props.language.label_open_shop } </HackbarButton>
                                  </ButtonGroup>
                              </Grid>
                          )
                          :
                          (
                              <>
                                  { this.props.mob_shower.Shopper.ItemsInShop.length
                                    ?
                                    ( <Grid item xs={ 12 }>
                                        <FixedSizeList height={ 200 } width={ '100%' } itemSize={ 50 }
                                                       itemCount={ this.props.mob_shower.Shopper.ItemsInShop.length }>
                                            { this.render_shop }
                                        </FixedSizeList>
                                    </Grid> )
                                    :
                                    (
                                        <Grid item xs={ 12 }>
                                            <ButtonGroup>
                                                <HackbarButton
                                                    onClick={ () => this.onOpenShopClick() }> { this.props.language.label_open_shop } </HackbarButton>
                                            </ButtonGroup>
                                        </Grid>
                                    )
                                  }
                              </>

                          )

                        }
                    </>
                    }


                </Grid>
            )
        } else {
            return (
                <Typography> You selected instance </Typography>
            )
        }
    }

}

export default MobShower