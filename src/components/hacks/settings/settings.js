import { Menu, Grid, MenuItem, ListItemText,Slider, Typography, FormControlLabel, Checkbox, Select, Input, Divider } from '@material-ui/core'
import React from 'react'
import { connect }from 'react-redux'
import store from '../../../store'
import './settings_css.css'
import { HackbarCheckbox, HackbarSlider, HackbarButton } from '../../hackbar_style/hackbar_style.js'
import { ACTIONS } from '../../../utils/enums.js'
import FileHandler from "../file_handler";

class Settings extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            upgrade_menu: 0,
        }

    }
    SwitchRestartHere = () => {
        let _module = {
            ...this.props.settings,
            RestartHere: !this.props.settings.RestartHere,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchRestartInCity = () => {
        let _module = {
            ...this.props.settings,
            RestartInCity: !this.props.settings.RestartInCity,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchBluePotions = () => {
        let _module = {
            ...this.props.settings,
            BluePotions: !this.props.settings.BluePotions,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchRedPotions = () => {
        let _module = {
            ...this.props.settings,
            RedPotions: !this.props.settings.RedPotions,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchSpeedHack = () => {
        let _module = {
            ...this.props.settings,
            SpeedHack: !this.props.settings.SpeedHack,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchUseWallhack = () => {
        let _module = {
            ...this.props.settings,
            UseWallhack: !this.props.settings.UseWallhack,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchAntiExp = () => {
        let _module = {
            ...this.props.settings,
            AntiExp: !this.props.settings.AntiExp,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchAutoLogin = () => {
        let _module = {
            ...this.props.settings,
            AutoLogin: !this.props.settings.AutoLogin,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    onSpeedHackSpeedMultiplierChange = (event, new_speed_multiplier) => {
        let _module = {
            ...this.props.settings,
            SpeedMultiplier: new_speed_multiplier,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
           
    }
    onMinHealthChange = (event, new_min_health) => {
        let _module = {
            ...this.props.settings,
            MinHealth: new_min_health,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
           
    }
    onMinManaChange = (event, new_min_mana) => {
        let _module = {
            ...this.props.settings,
            MinMana: new_min_mana,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'Settings'}, index:store.getState().receivePacketsReducer.selected_client_id})
           
    }
    OpenChannelSwitchMenu= (e) => {
        this.setState({...this.state,
            upgrade_menu: e.currentTarget,
        })
    }
    CloseChannelSwitchMenu = (channel_id) => {
        if(channel_id){
            let _module = {
                ChangeChannel: channel_id,
            }
            store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'ChannelSwitcher'}, index:store.getState().receivePacketsReducer.selected_client_id})
        }
        this.setState({
            ...this.state,
            upgrade_menu: 0,
        })

    }

    render = () => {
        if(this.props.settings){
            let red_potion_slider = () => {}
            if(this.props.settings.RedPotions){
                red_potion_slider = () => {
                    let label = this.props.language.label_recommended
                    return (<Grid item xs={12} className='item_slider'>
                                        <HackbarSlider
                                        onChange={this.onMinHealthChange}
                                                defaultValue={this.props.settings.MinHealth}
                                                aria-labelledby="discrete-slider-small-steps"
                                                step={1}
                                                marks={[{value: 80, label: label}]}
                                                min={1}
                                                max={100}
                                                valueLabelDisplay="auto"
                                            />
                                    </Grid>)}
            }
           let blue_potion_slider = () => {}
           if (this.props.settings.BluePotions){
               blue_potion_slider = () => {
                   let label = this.props.language.label_recommended
                   return(
                    <Grid item xs={12} className='item_slider'>
                    <HackbarSlider
                    onChange={this.onMinManaChange}
                            defaultValue={this.props.settings.MinMana}
                            aria-labelledby="discrete-slider-small-steps"
                            step={1}
                            marks={[{value: 80, label:label}]}
                            min={1}
                            max={100}
                            valueLabelDisplay="auto"
                        />
                </Grid>
                   )
               }
           }
           let speed_hack_slider = () => {}
           if (this.props.settings.SpeedHack){
            speed_hack_slider = () => {
                let label = this.props.language.label_recommended
                return(
                    <Grid item xs={12} className='item_slider'>
                    <HackbarSlider
                    onChange={this.onSpeedHackSpeedMultiplierChange}
                            defaultValue={Math.round(this.props.settings.SpeedMultiplier, 2)}
                            aria-labelledby="discrete-slider-small-steps"
                            step={0.1}
                            marks={[{value: 2, label:label}]}
                            min={1}
                            max={10}
                            valueLabelDisplay="auto"
                        />
                </Grid>
                   )
               }
           }     
           
            return (
                <Grid container>
                    <Grid container>
                        <Grid item xs={12}>
                            <Typography> {this.props.language.respawn_options} </Typography>
                        </Grid>

                        <Grid item xs={6}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.RestartHere} onChange={ () => this.SwitchRestartHere()} name="mine"/>} label={this.props.language.label_respawn_here}/>
                        </Grid>
                        <Grid item xs={6}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.RestartInCity} onChange={ () => this.SwitchRestartInCity()} name="mine"/>} label={this.props.language.label_respawn_in_city}/>
                        </Grid>
                        <Divider className='divider-settings'/>
                    </Grid>
                    <Grid container>
                        <Grid item xs={12}>
                            <Typography> {this.props.language.potions} </Typography>
                        </Grid>
                        <Grid item xs={12}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.RedPotions} onChange={ () => this.SwitchRedPotions()} name="mine"/>} label={this.props.language.label_use_red_potions}/>
                            {red_potion_slider()}
                        </Grid>
                        <Grid item xs={12}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.BluePotions} onChange={ () => this.SwitchBluePotions()} name="mine"/>} label={this.props.language.label_use_blue_potions}/>
                            {blue_potion_slider()}
                        </Grid>
                        <Divider className='divider-settings'/>
                    </Grid>
                    <Grid container>
                        <Grid item xs={12}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.SpeedHack} onChange={ () => this.SwitchSpeedHack()} name="mine"/>} label={this.props.language.label_use_speedhack}/>
                            {speed_hack_slider()}
                        </Grid>
                        <Divider className='divider-settings'/>
                    </Grid>
                    <Grid container>
                        <Grid item xs={12}>
                            <Typography> {this.props.language.other_options} </Typography>
                        </Grid>
                        <Grid item xs={6}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.AntiExp} onChange={ () => this.SwitchAntiExp()} name="mine"/>} label={this.props.language.label_anti_exp}/>
                        </Grid>
                        <Grid item xs={6}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.UseWallhack} onChange={ () => this.SwitchUseWallhack()} name="mine"/>} label={this.props.language.label_wallhack}/>
                        </Grid>
                        <Grid item xs={6}>
                            <FormControlLabel control={<HackbarCheckbox checked={this.props.settings.AutoLogin} onChange={ () => this.SwitchAutoLogin()} name="mine"/>} label={this.props.language.label_auto_login}/>
                        </Grid>
                        <Grid item xs={6}>
                            <HackbarButton onClick={(e) => this.OpenChannelSwitchMenu(e)}>
                                {this.props.language.channels}
                            </HackbarButton>
                            <Menu
                            id="simple-menu"
                            anchorEl={this.state.upgrade_menu}
                            keepMounted
                            open={Boolean(this.state.upgrade_menu)}
                            onClose={() => this.CloseChannelSwitchMenu(0)}>
                            <MenuItem disabled> {this.props.language.choose_channel} </MenuItem>
                            {Object.keys(this.props.channel_switcher.Channels).map(key =>{
                                return (
                                    <MenuItem onClick={()=>this.CloseChannelSwitchMenu(parseInt(key))}> Channel {key} </MenuItem>
                                )
                            })}
                        </Menu>
                        </Grid>
                        <Grid item xs={12}>
                            <FileHandler socket={this.props.socket} other_settings language={this.props.file_handler_language}/>
                        </Grid>
                    </Grid>
                </Grid>
    
                )
        }
        return(<>Cannot load settings</>)
    }
}

function mapStateToProps(state){
    //console.log(state.receivePacketsReducer.hack_status)
    return {
        channel_switcher: state.receivePacketsReducer.hack_status.ChannelSwitcher,
        settings: state.receivePacketsReducer.hack_status.Settings
    }
}

export default connect(mapStateToProps)(Settings)