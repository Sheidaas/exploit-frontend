import { Button, Grid, ListItem, ListItemText, Slider , makeStyles, useStyles, Typography, FormControlLabel, Checkbox, Select, Input, MenuItem, } from '@material-ui/core'
import React from 'react'
import { connect }from 'react-redux'
import store from '../../../store'
import aura from '../../../images/skills/warrior_b_3.png'
import berserk from '../../../images/skills/warrior_b_2.png'
import { ACTIONS } from '../../../utils/enums.js'

class Skillbot extends React.Component{
    constructor(props){
        super(props)

    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.skillbot,
            Enabled: !this.props.skillbot.Enabled
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchInstantMode = () => {
        let _module = {
            ...this.props.skillbot,
            InstantMode: !this.props.skillbot.InstantMode
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchShouldWaitAfterLogout = () => {
        let _module = {
            ...this.props.skillbot,
            ShouldWaitAfterLogout: !this.props.skillbot.ShouldWaitAfterLogout
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    onChangeTimeToWaitAfterLogout = (new_value) => {
        let _module = {
        ...this.props.skillbot,
        TimeToWaitAfterLogout: new_value
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    onSkillChange = (new_skill, skill_index) => {
        let new_skills = this.props.skillbot.CurrentSkillSet
        new_skills[skill_index] = new_skill
        let _module = {
            ...this.props.skillbot,
            CurrentSkillSet: new_skills
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    
    }

    render = () => {
        console.log(this.props.skillbot)
        return (
            <Grid container>
                {
                this.props.skillbot.CurrentSkillSet.map( (element, i) => {
                    return (
                        <Grid item xs={3}>
                            <Skill skill={element} instantMode={this.props.skillbot.InstantMode} index={i} onchange={this.onSkillChange}/>
                        </Grid>
                    )
                })
                }
                <Grid item xs={12}>
                    <FormControlLabel control={<Checkbox checked={this.props.skillbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label="Start"/>
                    <FormControlLabel control={<Checkbox checked={this.props.skillbot.InstantMode} onChange={ () => this.SwitchInstantMode()} name="mine"/>} label="Instant mode"/>
                    <FormControlLabel control={<Checkbox checked={this.props.skillbot.ShouldWaitAfterLogout} onChange={ () => this.SwitchShouldWaitAfterLogout()} name="mine"/>} label="Should Wait After Logout"/>
                    <Input type='number' value={this.props.skillbot.TimeToWaitAfterLogout} onChange={(e)=>this.onChangeTimeToWaitAfterLogout(parseInt(e.target.value))}/>
                </Grid>
            </Grid>
            )
    }
}

function mapStateToProps(state){
    //console.log(state.receivePacketsReducer.character_status)
    return {
        skillbot: state.receivePacketsReducer.hack_status.SkillBot
    }
}


class Skill extends React.Component{
    constructor(props){
        super(props)
    }

    SwitchUse = () => {
        let new_skill = {
            ...this.props.skill,
            can_cast: !this.props.skill.can_cast
        }
        this.props.onchange(new_skill, this.props.index)
    }
    onChangeCooldownTimeInstandModeUse = (new_value) => {
        let new_skill = {
            ...this.props.skill,
            cooldown_time_instant_mode: new_value
        }
        this.props.onchange(new_skill, this.props.index)
    }
    render = () => {

        return (
            <Grid item>
                <img src={getSkillImageByID(this.props.skill.id)}  width={50}/>
                <FormControlLabel control={<Checkbox checked={this.props.skill.can_cast} onChange={ () => this.SwitchUse()} name="mine"/>} label="Use"/>
                <Input type='number' value={this.props.skill.cooldown_time_instant_mode}  onChange={(e)=>this.onChangeCooldownTimeInstandModeUse(parseInt(e.target.value))}/>
                <FormControlLabel control={<Checkbox checked={this.props.skill.is_turned_on} name="mine"/>} label="is turned on"/>
            </Grid>
        )
    }
}

const getSkillImageByID = (id) => {
    if(id == 3){
        return berserk
    }
    else if(id==4){
        return aura
    }
}


export default connect(mapStateToProps)(Skillbot)