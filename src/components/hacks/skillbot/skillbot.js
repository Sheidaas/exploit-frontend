import {
    Button,
    Grid,
    ListItem,
    ListItemText,
    Slider,
    makeStyles,
    useStyles,
    Typography,
    FormControlLabel,
    Checkbox,
    Select,
    Input,
    MenuItem,
    Popover,
} from '@material-ui/core'
import React from 'react'
import './skillbot.css'
import store from '../../../store'
import aura from '../../../images/skills/warrior_b_3.png'
import berserk from '../../../images/skills/warrior_b_2.png'
import hide from '../../../images/skills/ninja_d_3.png'
import empty from '../../../images/skills/ninja_d_5.png'
import fast_attack from '../../../images/skills/ninja_d_1.png'
import rolling_dagger from '../../../images/skills/ninja_d_2.png'
import poisonous_cloud from '../../../images/skills/ninja_d_4.png'
import ambush from '../../../images/skills/ninja_d_0.png'
import sura_w_0 from '../../../images/skills/sura_w_0.png'
import sura_w_1 from '../../../images/skills/sura_w_1.png'
import sura_w_2 from '../../../images/skills/sura_w_2.png'
import sura_w_3 from '../../../images/skills/sura_w_3.png'
import sura_w_4 from '../../../images/skills/sura_w_4.png'
import sura_w_5 from '../../../images/skills/sura_w_5.png'

import { ACTIONS } from '../../../utils/enums.js'
import {FixedSizeList, shouldComponentUpdate} from "react-window";
import {HackbarButton, HackbarSlider, HackbarSelect, HackbarCheckbox} from "../../hackbar_style/hackbar_style";

const STAT_ENUM = {
    'HP': 'Health',
    'INT': 'Intelligence',
    'STR': 'Strength',
    'DEX': 'Dexterity',
}

const ACTIVE_SKILL_IDS = [
    109,
    110,
    111,
    174,
    175,
    19,
    34,
    49,
    63,
    64,
    65,
    78,
    79,
    94,
    95,
    96,
    3,
    4,
]

class Skillbot extends React.Component{
    constructor(props){
        super(props)
        this.shouldComponentUpdate = shouldComponentUpdate.bind(this)
    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.skillbot,
            Enabled: !this.props.skillbot.Enabled
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchInstantMode = () => {
        let _module = {
            ...this.props.skillbot,
            InstantMode: !this.props.skillbot.InstantMode
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchUpgradeSkills = () => {
        let _module = {
            ...this.props.skillbot,
            UpgradeSkills: !this.props.skillbot.UpgradeSkills
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchUpgradeStats = () => {
        let _module = {
            ...this.props.skillbot,
            UpgradeStats: !this.props.skillbot.UpgradeStats
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchFollowVID = () => {
        let _module = {
            ...this.props.skillbot,
            FollowVID: !this.props.skillbot.FollowVID,
            FollowedVID: 0
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchUnmountHorse = () => {
        let _module = {
            ...this.props.skillbot,
            UnmountHorse: !this.props.skillbot.UnmountHorse
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    SwitchShouldWaitAfterLogout = () => {
        let _module = {
            ...this.props.skillbot,
            ShouldWaitAfterLogout: !this.props.skillbot.ShouldWaitAfterLogout
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    onChangeTimeToWaitAfterLogout = (event, new_value) => {
        let _module = {
        ...this.props.skillbot,
        TimeToWaitAfterLogout: new_value
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    onSkillChange = (new_skill, skill_index) => {
        let new_skills = this.props.skillbot.CurrentSkillSet
        new_skills[skill_index] = new_skill
        let _module = {
            ...this.props.skillbot,
            CurrentSkillSet: new_skills
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    
    }
    renderStatOrder = (props) => {
        const { index, style } = props
        return (
                 <NewStatListItem index={index} skillbot={this.props.skillbot} style={style} socket={this.props.socket}/>
        )
    }
    renderSkillOrder = (props) => {
        const { index, style } = props
        console.log()
        return (
            <ListItem >
                <ListItemText> {this.props.skillbot.CurrentSkillSet[index].id} </ListItemText>
            </ListItem>
        )
    }
    onFollowedVIDChange = (new_vid) => {
        let _module = {
            ...this.props.skillbot,
            FollowedVID: new_vid
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }
    //                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.InstantMode} onChange={ () => this.SwitchInstantMode()} name="mine"/>} label="Instant mode"/>
    render = () => {
        return (
            <Grid container>
                {
                this.props.skillbot.CurrentSkillSet.map( (element, i) => {
                    return (
                        <>
                            <Skill skill={element} instantMode={this.props.skillbot.InstantMode} index={i} onchange={this.onSkillChange}/>
                        </>

                    )
                })
                }
                <Grid item xs={12}>
                    <Grid item xs={12}>
                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label="Start"/>
                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.UnmountHorse} onChange={ () => this.SwitchUnmountHorse()} name="mine"/>} label="Unmount horse"/>
                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.UpgradeSkills} onChange={ () => this.SwitchUpgradeSkills()} name="mine"/>} label="Upgrade skills"/>
                    </Grid>

                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.FollowVID} onChange={ () => this.SwitchFollowVID()} name="mine"/>} label="Follow VID"/>
                        { this.props.skillbot.FollowVID &&
                        <Grid item={12}>
                            <HackbarSelect
                                fullWidth={true}
                                label={'Choose VID to follow'}
                                value={this.props.skillbot.FollowedVID}
                                onChange={e => this.onFollowedVIDChange(e.target.value)}
                            >
                            <MenuItem value={0}> No one </MenuItem>
                                {
                                    this.props.instances_list.map ( element => {
                                        if (element.type === 6 && this.props.character_status.vid !== element.vid && element.name !== 'None'){
                                            return(
                                                <MenuItem value={element.vid}> {element.name} </MenuItem>
                                            )
                                        }
                                    })
                                }

                            </HackbarSelect>
                        </Grid>
                        }
                        <Grid item xs={12}>
                            <FormControlLabel control={<Checkbox checked={this.props.skillbot.ShouldWaitAfterLogout} onChange={ () => this.SwitchShouldWaitAfterLogout()} name="mine"/>} label="Wait after logout"/>
                            { this.props.skillbot.ShouldWaitAfterLogout &&
                                <Grid item xs={12}>
                                    <Typography> Set time to wait </Typography>
                                    <HackbarSlider
                                        value={this.props.skillbot.TimeToWaitAfterLogout}
                                        onChange={this.onChangeTimeToWaitAfterLogout}
                                        min={3} max={15} valueLabelDisplay={true} marks
                                    />
                                </Grid>

                            }
                        </Grid>

                    <Grid item xs={12}>
                        <FormControlLabel control={<Checkbox checked={this.props.skillbot.UpgradeStats} onChange={ () => this.SwitchUpgradeStats()} name="mine"/>} label="Upgrade stats"/>
                    </Grid>
                    <Grid item xs={12}>
                            <FixedSizeList height={200} width={'100%'} itemSize={40} itemCount={this.props.skillbot.StatToUpgradeOrder.length} onChange={() => this.shouldComponentUpdate()}>
                                {this.renderStatOrder}
                            </FixedSizeList>
                    </Grid>

                </Grid>
            </Grid>
            )
    }
}
// <Grid item xs={6}>
//    <FixedSizeList height={200} width={'50%'} itemSize={30} itemCount={this.props.skillbot.CurrentSkillSet} onChange={() => this.shouldComponentUpdate()}>
//        {this.render_equpiment}
//     </FixedSizeList>
// </Grid>

class NewStatListItem extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            menu: false,
            anchorEl: null
        }
    }

    CloseMenu = (action_value=-1, old_index=-1) => {
        console.log(action_value)
        if (action_value === -1 || old_index === -1){
            this.setState({...this.state, menu: !this.state.menu})
        }
        this.ChangeOrder(old_index, action_value)
        this.setState({...this.state, menu: !this.state.menu})
    }

    ChangeOrder = (old_index=0, new_index=0) => {
        let temp = this.props.skillbot.StatToUpgradeOrder[new_index]
        this.props.skillbot.StatToUpgradeOrder[new_index] =  this.props.skillbot.StatToUpgradeOrder[old_index]
        this.props.skillbot.StatToUpgradeOrder[old_index] = temp
        console.log(this.props.skillbot.StatToUpgradeOrder)
        let _module = {
            ...this.props.skillbot,
            StatToUpgradeOrder: this.props.skillbot.StatToUpgradeOrder,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'SkillBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    OpenMenu = (event) => {
        this.setState({...this.state, menu: true, anchorEl: event.currentTarget})
    }

    render = () => {
        return (
            <>
                <ListItem key={this.props.index} style={this.props.style}>
                    <ListItemText>
                        {STAT_ENUM[this.props.skillbot.StatToUpgradeOrder[this.props.index]]}
                        <HackbarButton
                            onClick={(e) => this.OpenMenu(e)}> {this.props.index+1}
                        </HackbarButton>
                        <Popover
                            id="simple-menu"
                            keepMounted
                            anchorEl={this.state.anchorEl}
                            open={Boolean(this.state.menu)}
                            onClose={() => this.CloseMenu()}

                        >
                            <MenuItem disabled> Set new order </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(0, this.props.index)} > 1 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(1, this.props.index)} > 2 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(2, this.props.index)} > 3 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(3, this.props.index)} > 4 </MenuItem>
                        </Popover>
                    </ListItemText>
                </ListItem>

            </>
        )

}
}

class Skill extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            menu: false,
            anchorEl: null
        }
    }

    CloseMenu = (action_value=-1) => {
        if (action_value === -1){
            this.setState({...this.state, menu: !this.state.menu})
        }
        this.ChangeOrder(action_value)
        this.setState({...this.state, menu: !this.state.menu})
    }

    ChangeOrder = (new_index=0) => {
        let new_skill = {
            ...this.props.skill,
            upgrade_order: new_index
        }
        console.log(new_skill)
        this.props.onchange(new_skill, this.props.index)
    }

    OpenMenu = (event) => {
        this.setState({...this.state, menu: true, anchorEl: event.currentTarget})
    }
    SwitchUse = () => {
        if(!ACTIVE_SKILL_IDS.includes(this.props.skill.id)){
            return
        }
        let new_skill = {
            ...this.props.skill,
            can_cast: !this.props.skill.can_cast
        }
        this.props.onchange(new_skill, this.props.index)
    }
    onChangeCooldownTimeInstandModeUse = (event, new_value) => {
        let new_skill = {
            ...this.props.skill,
            cooldown_time_instant_mode: new_value
        }
        this.props.onchange(new_skill, this.props.index)
    }
    render = () => {
        console.log(this.props.skill)
        return (
            <Grid item xs={2}>
                <Grid className={'skillImage'}>
                    <img src={getSkillImageByID(this.props.skill.id)} width={70}/>
                </Grid>
                <Grid className={'skillInputs'}>
                    <Grid item xs={12}>
                            <HackbarButton onClick={this.OpenMenu}>
                                {this.props.skill.upgrade_order} </HackbarButton>
                        <Popover
                            id="simple-menu"
                            keepMounted
                            anchorEl={this.state.anchorEl}
                            open={Boolean(this.state.menu)}
                            onClose={() => this.CloseMenu()}

                        >
                            <MenuItem disabled> Set new upgrade order </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(1)} > 1 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(2)} > 2 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(3)} > 3 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(4)} > 4 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(5)} > 5 </MenuItem>
                            <MenuItem onClick={() => this.CloseMenu(6)} > 6 </MenuItem>
                        </Popover>
                    </Grid>
                    <Grid item xs={6}>
                        { ACTIVE_SKILL_IDS.includes(this.props.skill.id) &&
                                <FormControlLabel control={<HackbarCheckbox checked={this.props.skill.can_cast} onChange={ () => this.SwitchUse()} name="mine"/>} label={'Use'}/>
                        }
                    </Grid>
                    { ACTIVE_SKILL_IDS.includes(this.props.skill.id) &&
                        <Grid item xs={11}>
                        <HackbarSlider
                        value={this.props.skill.cooldown_time_instant_mode}
                        min={30} max={200} step={5} valueLabelDisplay={true}
                        onChange={this.onChangeCooldownTimeInstandModeUse}
                        />
                        </Grid>
                    }

                </Grid>


            </Grid>
        )
    }
}

const getSkillImageByID = (id) => {
    if(id === 3){
        return berserk
    }
    else if(id===4){
        return aura
    }
    else if(id===34){
        return hide
    }
    else if(id===31){
        return ambush
    }
    else if(id===32){
        return fast_attack
    }
    else if(id===33){
        return rolling_dagger
    }
    else if(id===35){
        return poisonous_cloud
    }
    else if(id===36){
        return empty
    }
    else if(id===61){
        return sura_w_0
    }
    else if(id===62){
        return sura_w_1
    }
    else if(id===63){
        return sura_w_2
    }
    else if(id===64){
        return sura_w_3
    }
    else if(id===65){
        return sura_w_4
    }
    else if(id===66){
        return sura_w_5
    }}


export default Skillbot