import React from 'react'
import store from '../../store'
import { FixedSizeList } from 'react-window'
import { Button, Grid, ListItem, List, ListItemText, Slider , makeStyles, useStyles, Typography, FormControlLabel, Checkbox, Select, TextField, MenuItem, } from '@material-ui/core'
import { connect }from 'react-redux'
import { HackbarCheckbox, HackbarSlider } from '../hackbar_style/hackbar_style.js'
import { shouldComponentUpdate } from "react-window";
import './pickup_filter.css'
import { ACTIONS } from '../../utils/enums.js'

class PickupFilter extends React.Component {
    constructor(props){
        super(props)
        this.state = {
            show_only_checked: false,
            show_only_unchecked: false,
            item_filter: '',
            items_to_show: [],
            interval: setInterval(() => {
                this.refreshPickupFilter()
              }, 500),
        }
        this.shouldComponentUpdate = shouldComponentUpdate.bind(this)
    }

    componentDidMount = () => {
        this.refreshPickupFilter()
    }
    componentWillUnmount = () => {
        clearInterval(this.state.interval);
    }

    refreshPickupFilter = () => {
        let index = store.getState().receivePacketsReducer.selected_client_id
        store.dispatch({type: ACTIONS.GET_PICKUP_FILTER, client: this.props.socket, index: index})
        this.onReceivePickupFilter()

    }

    render_item_filter = (props) => {
        const { index, style } = props;
        let item = this.props.item_list[this.state.items_to_show[index]]
        let checked = false
        if(this.props.pickup_filter.includes( parseInt(this.state.items_to_show[index]))){
            checked = true
        }
        return(
            <div className='item'>
                <ListItem button key={index} style={style}>
                    <FormControlLabel control={<HackbarCheckbox checked={checked} onChange={ () => {this.onChangeItemPickup(this.state.items_to_show[index])}} name="mine"/>} label={item.name} />
                </ListItem> 
            </div>
            )
    }
 
    onChangeItemPickup = (item_id) => {
        if(this.props.pickup_filter.includes(item_id)){
            let _module = {
                pickup_filter: this.props.pickup_filter.filter((item) => item !== item_id)
            }
            console.log(_module)
            store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'PickupFilter'}, index:store.getState().receivePacketsReducer.selected_client_id})
            this.forceUpdate()
        }
        else{
            let new_pickup_filter = this.props.pickup_filter
            new_pickup_filter.push(item_id)
            let _module = {
                pickup_filter: new_pickup_filter
            }
            console.log(_module)
            store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'PickupFilter'}, index:store.getState().receivePacketsReducer.selected_client_id})      
            this.forceUpdate()
        }

    }

    switchShowOnlyChecked = () => {
        this.setState({
            ...this.state,
            show_only_checked: !this.state.show_only_checked,
            show_only_unchecked: false,
        })
    }

    switchShowOnlyUnchecked = () => {
        this.setState({
            ...this.state,
            show_only_checked: false,
            show_only_unchecked: !this.state.show_only_unchecked,
        })
    }

    onPickupFilterChange = (new_value) =>{
        console.log(new_value)
        this.setState({
            ...this.state,
            item_filter: new_value
        })
    }

    onReceivePickupFilter = () => {
        if(this.props.pickup_filter){
            let items_to_show = []
            if(this.state.show_only_checked){
                Object.keys(this.props.item_list).map(item => {
                    if(this.props.pickup_filter.includes(parseInt(item))){
                        if(this.props.item_list[item].name.includes(this.state.item_filter)){
                            items_to_show.push(parseInt(item))
                        }
                    }
                })
                this.setState({
                    ...this.state,
                    items_to_show: items_to_show
                })
                return
            }
            else if(this.state.show_only_unchecked){
                Object.keys(this.props.item_list).map(item => {
                    if(!this.props.pickup_filter.includes(parseInt(item))){
                        if(this.props.item_list[item].name.includes(this.state.item_filter)){
                            items_to_show.push(parseInt(item))
                        }
                    }
                })
                this.setState({
                    ...this.state,
                    items_to_show: items_to_show
                })
                return
            }
            else{
                Object.keys(this.props.item_list).map(item => {
                    if(this.props.item_list[item].name.includes(this.state.item_filter)){
                        items_to_show.push(parseInt(item))
                    }
                })
                this.setState({
                    ...this.state,
                    items_to_show: items_to_show
                })
            }
        }


    }

    render = () => {
        let is_rendering_pickup_filter = <> </>
        if (this.props.pickup_filter.length){
            is_rendering_pickup_filter = <>
                <FixedSizeList height={200} width={'100%'} itemSize={30} itemCount={this.state.items_to_show.length} onChange={() => this.shouldComponentUpdate()}>
                    {this.render_item_filter}
                </FixedSizeList>
             </>
        }
        return (
            <>
            <Grid item xs={12} className='pickup-filter-header'>
                <Typography> Pickup list </Typography>
            </Grid>
            <Grid item xs={6}>
            <FormControlLabel control={<HackbarCheckbox checked={this.state.show_only_checked} onChange={ () => {this.switchShowOnlyChecked()}} name="mine"/>} label={'Show only checked'} />
            </Grid>
            <Grid item xs={6}>
            <FormControlLabel control={<HackbarCheckbox checked={this.state.show_only_unchecked} onChange={ () => {this.switchShowOnlyUnchecked()}} name="mine"/>} label={'Show only unchecked'} />
            </Grid>
            <TextField label='Item filter' name='textfield' helperText='Type here items to pickup' type='text' value={this.state.item_filter} onChange={(e) => this.onPickupFilterChange(e.target.value)}/>
            <Grid item xs={12}>
                {is_rendering_pickup_filter}
            </Grid>
            </>
        )
    }
}

const mapStateToProps = (state) => {
    return {
        pickup_filter: state.receivePacketsReducer.pickup_filter,
        item_list: state.receivePacketsReducer.server_info.Items
    }
}

export default connect(mapStateToProps)(PickupFilter)





