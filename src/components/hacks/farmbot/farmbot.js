import { Button, Grid, ListItem, ListItemText, Typography, FormControlLabel, Checkbox, Select, Input, MenuItem, makeStyles} from '@material-ui/core'
import React from 'react'
import store from '../../../store'
import { connect }from 'react-redux'
import { FixedSizeList } from 'react-window';
import { HackbarCheckbox, HackbarSlider } from '../../hackbar_style/hackbar_style.js'

class Farmbot extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            ores: {
                20047: {
                    ore_id: 20047,
                    ore_item_id: 50601,
                    name: 'Diamond',
                    enabled: false,
                },
                20048: {
                    ore_id: 20048,
                    ore_item_id: 50602,
                    name: 'Amber',
                    enabled: false,
                },
                20049: {
                    ore_id: 20049,
                    ore_item_id: 50603,
                    name: 'Fossil',
                    enabled: false,
                },
                20050: {
                    ore_id: 20050,
                    ore_item_id: 50604,
                    name: '__Diamond',
                    enabled: false,
                },
                20051: {
                    ore_id: 20051,
                    ore_item_id: 50605,
                    name: 'Silver',
                    enabled: false,
                },
                20052: {
                    ore_id: 20052,
                    ore_item_id: 50606,
                    name: 'Gold',
                    enabled: false,
                },
                //20053: {
                //    ore_item_id: 50606,
                //    name: 'Jadeit',
                //    enabled: false,
                //},
                20054: {
                    ore_id: 20054,
                    ore_item_id: 50608,
                    name: 'Ebonit',
                    enabled: false,
                },
                20055: {
                    ore_id: 20055,
                    ore_item_id: 50609,
                    name: 'Shells',
                    enabled: false,
                },
                20056: {
                    ore_id: 20056,
                    ore_item_id: 50610,
                    name: 'White gold',
                    enabled: false,
                },
                20057: {
                    ore_id: 20057,
                    ore_item_id: 50611,
                    name: 'Krysztal',
                    enabled: false,
                },
                20058: {
                    ore_id: 20058,
                    ore_item_id: 50612,
                    name: 'Kwarc',
                    enabled: false,
                },
                20059: {
                    ore_id: 20059,
                    ore_item_id: 50613,
                    name: 'Heavens tears',
                    enabled: false,
                },
    
            }
            
        }
    }

    onPointDelete = (index) => {   
        let _module = {
            ...this.props.farmbot,
            Path: this.props.farmbot.Path.filter((item) => item !== this.props.farmbot.Path[index]),
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

    }

    render_all_waypoints = (props) => {
        const { index, style } = props;
        return(
            <div className='waypoint'>
                <ListItem button key={index} style={style} onClick={ () => {
                    this.onPointDelete(index)
                }}>
                    <ListItemText primary={`[${index+1}] ${Math.round(this.props.farmbot.Path[index][0]/100)}:${Math.round(this.props.farmbot.Path[index][1]/100)} ${getNiceLookingStringFromMapName(this.props.farmbot.Path[index][2])}`} />
                </ListItem> 
            </div>
            )
    }

    SwitchLookForOre = () => {
        let _module = {
            ...this.props.farmbot,
            LookForOre: !this.props.farmbot.LookForOre,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }

    SwitchLookForMetins = () => {
        let _module = {
            ...this.props.farmbot,
            LookForMetins: !this.props.farmbot.LookForMetins,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

    }

    SwitchExchangeItemsToEnergy = () => {
        let _module = {
            ...this.props.farmbot,
            ExchangeItemsToEnergy: !this.props.farmbot.ExchangeItemsToEnergy,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

    }

    SwitchChangeChannel = () => {
        let _module = {
            ...this.props.farmbot,
            ChangeChannel: !this.props.farmbot.ChangeChannel,
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.farmbot,
            Enabled: !this.props.farmbot.Enabled
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

    }

    OnChangeSelectOre = (ore_id) => {
        console.log(ore_id)
        let ores = this.state.ores
        let ore = this.state.ores[ore_id]
        ore.enabled = !ore.enabled
        ores[ore_id] = ore
        this.setState({ores: ores})
        if(this.props.farmbot.OresToMine.includes(parseInt(ore_id))){
            let _module = {
                ...this.props.farmbot,
                OresToMine: this.props.farmbot.OresToMine.filter((item) => item !== parseInt(ore_id))
            }
            store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})

        }
        else {
            let new_ores_to_mine = this.props.farmbot.OresToMine
            new_ores_to_mine.push(parseInt(ore_id))
            let _module = {
                ...this.props.farmbot,
                OresToMine: new_ores_to_mine
            }
            store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
        }


    }

    componentDidMount = () => {
        let ores = this.state.ores
        this.props.farmbot.OresToMine.map((_ore_id) => {
            let ore = this.state.ores[_ore_id]
            ore.enabled = true
            ores[_ore_id] = ore
        })
        this.setState({ores: ores})  
    }

    onClearButton = () => {
        let _module = {
            ...this.props.farmbot,
            Path: [],
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
   
    }
    onChangeWaitingTime = (new_value) => {
        let _module = {
            ...this.props.farmbot,
        WaitingTime: new_value
        }
        store.dispatch({type: 'UPDATE_ONE_HACK_MODULE', client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketesReducer.selected_client_id})
    }
    render = () => {
        return (

            <Grid container>
                <Grid item xs={12}>
                    <Typography> Waypoints </Typography> 
                    <Typography className='small-going-to-point'> Going to point {this.props.farmbot.CurrentWaypointIndex+1} </Typography> 
                    <FixedSizeList height={200} width={'100%'} itemSize={46} itemCount={this.props.farmbot.Path.length}>
                        {this.render_all_waypoints}
                    </FixedSizeList>
                    <Button onClick={() => this.onClearButton} primary> Clear path </Button>
                    <Grid container>
                        <Grid item xs={12}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label="Start"/>

                        </Grid>

                        <Grid item xs={6}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.LookForOre} onChange={ () => this.SwitchLookForOre()} name="mine"/>} label="Look for ores"/>
                        </Grid> 
                        <Grid item xs={6}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.LookForMetins} onChange={ () => this.SwitchLookForMetins()} name="mine"/>} label="Look for metins"/>
                        </Grid>
                        <Grid item xs={6}>
                        <Select
            multiple
            value={Object.entries(this.state.ores).map( ([key, _value]) => {return _value.name})}
            input={<Input />}
            renderValue={(selected) => 'Ores to mine'}
            >
            {Object.entries(this.state.ores).map( ([key, _value]) => {
                //console.log(key, _value)
                //onChange={(e) => this.OnChangeSelectOre(e.target.value)}
                return (
                    <MenuItem key={key} value={key}>
                        <Checkbox checked={_value.enabled} value={key} onChange={(e)=>this.OnChangeSelectOre(parseInt(e.target.value))}/> 
                    <ListItemText primary={_value.name.toString()} />
                    </MenuItem>
                )
            })}
            </Select>
                        </Grid>
                        <Grid item xs={6}>
                            
                        </Grid>

                        <Grid>

                                <Grid>
                                    <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.ExchangeItemsToEnergy} onChange={ () => this.SwitchExchangeItemsToEnergy()} name="mine"/>} label="ExchangeItemsToEnergy"/>
                                    <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.ChangeChannel} onChange={ () => this.SwitchChangeChannel()} name="mine"/>} label="ChangeChannel"/>
                                    <Input type='number' value={this.props.farmbot.WaitingTime} onChange={(e)=>this.onChangeWaitingTime(parseInt(e.target.value))}/>
                                </Grid>
                                <Grid>

                                </Grid>   
                                <Grid>
                                </Grid>   
                                <Grid>
                                </Grid>   
  
                            </Grid>
                            <Grid>

                            </Grid>

                    </Grid>
                </Grid>
            </Grid>
        )
    }
}

function getNiceLookingStringFromMapName(map_name){
    if ( map_name == 'metin2_map_a1'){
        return 'Shinsoo m1'
    }
    else if (map_name == 'metin2_map_a3'){
        return 'Shinsoo m2'
    }
    else if (map_name == 'metin2_map_b1'){
        return 'Chunjoo m1'
    }
    else if (map_name == 'metin2_map_b3'){
        return 'Chunjoo m2'
    }
    else if ( map_name == 'metin2_map_c1'){
        return 'Jinno m1'
    }   
    else if (map_name == 'metin2_map_c3'){
        return 'Jinno m2'
    }   
    else if (map_name == 'map_a2'){
        return 'Orcs valley'
    }    
    else if (map_name == 'map_n_snowm_01'){
        return 'Sohan Mountain'
    }
    else if (map_name == 'metin2_guild_village_01'){
        return 'metin2_guild_village_01'
    }

    else if (map_name == 'metin2_guild_village_02'){
        return 'metin2_guild_village_02'
    }
    else if (map_name == 'metin2_guild_village_02'){
        return 'metin2_guild_village_02'
    }
    else if (map_name == 'metin2_guild_village_03'){
        return 'metin2_guild_village_03'
    }
    else if (map_name == 'metin2_map_BayBlackSand'){
        return 'metin2_map_BayBlackSand'
    }
    else if (map_name == 'Metin2_map_CapeDragonHead'){
        return 'Metin2_map_CapeDragonHead'
    }
    else if (map_name == 'metin2_map_dawnmist_dungeon_01'){
        return 'metin2_map_dawnmist_dungeon_01'
    }
    else if (map_name == 'metin2_map_dawnmistwood'){
        return 'metin2_map_dawnmistwood'
    }
    else if (map_name == 'metin2_map_devilsCatacomb'){
        return 'metin2_map_devilsCatacomb'
    }
    else if (map_name == 'metin2_map_deviltower1'){
        return 'metin2_map_deviltower1'
    }
    else if (map_name == 'metin2_map_e1'){
        return 'metin2_map_e1'
    }
    else if (map_name == 'metin2_map_guild_01'){
        return 'Shinoo Guild'
    }
    else if (map_name == 'metin2_map_guild_02'){
        return 'Chunjo Guild'
    }
    else if (map_name == 'metin2_map_guild_03'){
        return 'Jinno Guild'
    }
    else if (map_name == 'metin2_map_monkeydungeon_02'){
        return 'Medium monkeys'
    }
    else if (map_name == 'metin2_map_monkeydungeon_03'){
        return 'Hard monkeys'
    }
    else if (map_name == 'metin2_map_monkeydungeon'){
        return 'Easy monkeys'
    }
    else if (map_name == 'metin2_map_Mt_Th_dungeon_01'){
        return 'metin2_map_Mt_Th_dungeon_01'
    }
    else if (map_name == 'metin2_map_Mt_Thunder'){
        return 'metin2_map_Mt_Thunder'
    }
    else if (map_name == 'metin2_map_n_desert_01'){
        return 'Yongbi Desert'
    }
    else if (map_name == 'metin2_map_n_flame_01'){
        return 'Fire Ground'
    }
    else if (map_name == 'metin2_map_n_flame_dungeon_01'){
        return 'metin2_map_n_flame_dungeon_01'
    }
    else if (map_name == 'metin2_map_n_snow_dungeon_01'){
        return 'metin2_map_n_snow_dungeon_01'
    }
    else if (map_name == 'metin2_map_nusluck01'){
        return 'metin2_map_nusluck01'
    }
    else if (map_name == 'metin2_map_privateshop'){
        return 'metin2_map_privateshop'
    }
    else if (map_name == 'metin2_map_skipia_dungeon_01'){
        return 'metin2_map_skipia_dungeon_01'
    }
    else if (map_name == 'metin2_map_skipia_dungeon_02'){
        return 'metin2_map_skipia_dungeon_02'
    }
    else if (map_name == 'metin2_map_spiderdungeon'){
        return 'metin2_map_spiderdungeon'
    }
    else if (map_name == 'metin2_map_spiderdungeon_02'){
        return 'metin2_map_spiderdungeon_02'
    }
    else if (map_name == 'metin2_map_spiderdungeon_03'){
        return 'metin2_map_spiderdungeon_03'
    }
    else if (map_name == 'metin2_map_trent'){
        return 'metin2_map_trent'
    }
    else if (map_name == 'metin2_map_trent02'){
        return 'metin2_map_trent02'
    }
    else if (map_name == 'metin2_map_WL_01'){
        return 'metin2_map_WL_01'
    }
    else if (map_name == 'metin2_map_milgyo'){
        return 'metin2_map_milgyo'
    }
    else {
        return 'metin2_map_milgyo'
    }
}

export default Farmbot