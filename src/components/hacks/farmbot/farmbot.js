import { Button, Grid, ListItem, ListItemText, Typography, FormControlLabel, Checkbox, Select, Input, MenuItem, makeStyles} from '@material-ui/core'
import React from 'react'
import store from '../../../store'
import { FixedSizeList } from 'react-window';
import { HackbarCheckbox } from '../../hackbar_style/hackbar_style.js'
import { ACTIONS } from '../../../utils/enums.js'
import { getNiceLookingStringFromMapName } from '../../../utils/functions'

class Farmbot extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            ores: {
                20047: {
                    ore_id: 20047,
                    ore_item_id: 50601,
                    name: this.props.language.diamond,
                    enabled: false,
                },
                20048: {
                    ore_id: 20048,
                    ore_item_id: 50602,
                    name: this.props.language.amber,
                    enabled: false,
                },
                20049: {
                    ore_id: 20049,
                    ore_item_id: 50603,
                    name: this.props.language.fossil,
                    enabled: false,
                },
                20050: {
                    ore_id: 20050,
                    ore_item_id: 50604,
                    name: this.props.language.cooper,
                    enabled: false,
                },
                20051: {
                    ore_id: 20051,
                    ore_item_id: 50605,
                    name: this.props.language.silver,
                    enabled: false,
                },
                20052: {
                    ore_id: 20052,
                    ore_item_id: 50606,
                    name: this.props.language.gold,
                    enabled: false,
                },
                //20053: {
                //    ore_item_id: 50606,
                //    name: 'Jadeit',
                //    enabled: false,
                //},
                20054: {
                    ore_id: 20054,
                    ore_item_id: 50608,
                    name: this.props.language.ebonit,
                    enabled: false,
                },
                20055: {
                    ore_id: 20055,
                    ore_item_id: 50609,
                    name: this.props.language.shells,
                    enabled: false,
                },
                20056: {
                    ore_id: 20056,
                    ore_item_id: 50610,
                    name: this.props.language.white_gold,
                    enabled: false,
                },
                20057: {
                    ore_id: 20057,
                    ore_item_id: 50611,
                    name: this.props.language.crystal,
                    enabled: false,
                },
                20058: {
                    ore_id: 20058,
                    ore_item_id: 50612,
                    name: this.props.language.amethyst,
                    enabled: false,
                },
                20059: {
                    ore_id: 20059,
                    ore_item_id: 50613,
                    name: this.props.language.heavens_tears,
                    enabled: false,
                },
    
            }
            
        }
    }

    onPointDelete = (index) => {   
        let _module = {
            ...this.props.farmbot,
            Path: this.props.farmbot.Path.filter((item) => item !== this.props.farmbot.Path[index]),
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }

    render_all_waypoints = (props) => {
        const { index, style } = props;
        return(
            <div className='waypoint'>
                <ListItem button key={index} style={style} onClick={ () => {
                    this.onPointDelete(index)
                }}>
                    <ListItemText primary={`[${index+1}] ${Math.round(this.props.farmbot.Path[index][0]/100)}:${Math.round(this.props.farmbot.Path[index][1]/100)} ${getNiceLookingStringFromMapName(this.props.farmbot.Path[index][2])}`} />
                </ListItem> 
            </div>
            )
    }

    SwitchLookForOre = () => {
        let _module = {
            ...this.props.farmbot,
            LookForOre: !this.props.farmbot.LookForOre,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }

    SwitchLookForMetins = () => {
        let _module = {
            ...this.props.farmbot,
            LookForMetins: !this.props.farmbot.LookForMetins,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }

    SwitchExchangeItemsToEnergy = () => {
        let _module = {
            ...this.props.farmbot,
            ExchangeItemsToEnergy: !this.props.farmbot.ExchangeItemsToEnergy,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }

    SwitchChangeChannel = () => {
        let _module = {
            ...this.props.farmbot,
            ChangeChannel: !this.props.farmbot.ChangeChannel,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }

    SwitchEnabled = () => {
        let _module = {
            ...this.props.farmbot,
            Enabled: !this.props.farmbot.Enabled
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

    }

    OnChangeSelectOre = (ore_id) => {
        console.log(ore_id)
        let ores = this.state.ores
        let ore = this.state.ores[ore_id]
        ore.enabled = !ore.enabled
        ores[ore_id] = ore
        this.setState({ores: ores})
        if(this.props.farmbot.OresToMine.includes(parseInt(ore_id))){
            let _module = {
                ...this.props.farmbot,
                OresToMine: this.props.farmbot.OresToMine.filter((item) => item !== parseInt(ore_id))
            }
            store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})

        }
        else {
            let new_ores_to_mine = this.props.farmbot.OresToMine
            new_ores_to_mine.push(parseInt(ore_id))
            let _module = {
                ...this.props.farmbot,
                OresToMine: new_ores_to_mine
            }
            store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
        }


    }

    componentDidMount = () => {
        let ores = this.state.ores
        this.props.farmbot.OresToMine.map((_ore_id) => {
            let ore = this.state.ores[_ore_id]
            ore.enabled = true
            ores[_ore_id] = ore
        })
        this.setState({ores: ores})  
    }

    onClearButton = () => {
        let _module = {
            ...this.props.farmbot,
            ClearPath: true,
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
   
    }
    onChangeWaitingTime = (new_value) => {
        let _module = {
            ...this.props.farmbot,
        WaitingTime: new_value
        }
        store.dispatch({type: ACTIONS.UPDATE_ONE_HACK_MODULE, client: this.props.socket, payload: { module_dict:_module, module_name: 'FarmBot'}, index:store.getState().receivePacketsReducer.selected_client_id})
    }
    render = () => {
        return (

            <Grid container>
                <Grid item xs={12}>
                    <Typography> {this.props.language.waypoints} </Typography>
                    <Typography className='small-going-to-point'> {this.props.language.going_to_point} {this.props.farmbot.CurrentWaypointIndex+1} </Typography>
                    <FixedSizeList height={200} width={'100%'} itemSize={46} itemCount={this.props.farmbot.Path.length}>
                        {this.render_all_waypoints}
                    </FixedSizeList>
                    <Button onClick={() => this.onClearButton} primary> {this.props.language.clear_path} </Button>
                    <Grid container>
                        <Grid item xs={12}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.Enabled} onChange={ () => this.SwitchEnabled()} name="mine"/>} label={this.props.language.label_start}/>

                        </Grid>

                        <Grid item xs={6}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.LookForOre} onChange={ () => this.SwitchLookForOre()} name="mine"/>} label={this.props.language.label_look_for_ores}/>
                        </Grid> 
                        <Grid item xs={6}>
                        <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.LookForMetins} onChange={ () => this.SwitchLookForMetins()} name="mine"/>} label={this.props.language.label_look_for_metins}/>
                        </Grid>
                        <Grid item xs={6}>
                        <Select
            multiple
            value={Object.entries(this.state.ores).map( ([key, _value]) => {return _value.name})}
            input={<Input />}
            renderValue={(selected) => this.props.language.ores_to_mine }
            >
            {Object.entries(this.state.ores).map( ([key, _value]) => {
                //console.log(key, _value)
                //onChange={(e) => this.OnChangeSelectOre(e.target.value)}
                return (
                    <MenuItem key={key} value={key}>
                        <Checkbox checked={_value.enabled} value={key} onChange={(e)=>this.OnChangeSelectOre(parseInt(e.target.value))}/> 
                    <ListItemText primary={_value.name.toString()} />
                    </MenuItem>
                )
            })}
            </Select>
                        </Grid>
                        <Grid item xs={6}>
                            
                        </Grid>

                        <Grid>

                                <Grid>
                                    <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.ExchangeItemsToEnergy} onChange={ () => this.SwitchExchangeItemsToEnergy()} name="mine"/>} label={this.props.language.exchange_items_to_energy}/>
                                    <FormControlLabel control={<HackbarCheckbox checked={this.props.farmbot.ChangeChannel} onChange={ () => this.SwitchChangeChannel()} name="mine"/>} label={this.props.language.change_channel}/>
                                    <Input type='number' value={this.props.farmbot.WaitingTime} onChange={(e)=>this.onChangeWaitingTime(parseInt(e.target.value))}/>
                                </Grid>
                                <Grid>

                                </Grid>   
                                <Grid>
                                </Grid>   
                                <Grid>
                                </Grid>   
  
                            </Grid>
                            <Grid>

                            </Grid>

                    </Grid>
                </Grid>
            </Grid>
        )
    }
}





export default Farmbot