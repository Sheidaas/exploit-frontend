import React from 'react'
import { Paper, Grid, MenuItem, Select, AppBar, Tabs, Tab, Box, Typography, styled} from '@material-ui/core'
import store from '../../../store'
import { connect }from 'react-redux'
import './metin_client_left_side.css'
import Farmbot from '../../hacks/farmbot/farmbot.js'
import Settings from '../../hacks/settings/settings'
import Waithack from '../../hacks/waithack/waithack'
import Skillbot from '../../hacks/skillbot/skillbot'
import Pickup from '../../hacks/pickup/pickup'
import { HackbarAppBar, HackbarTabs } from '../../hackbar_style/hackbar_style.js'

function TabPanel(props) {
    const { children, value, index, ...other } = props;
  
    return (
      <div
        role="tabpanel"
        hidden={value !== index}
        id={`simple-tabpanel-${index}`}
        aria-labelledby={`simple-tab-${index}`}
        {...other}
      >
        {value === index && (
          <Box p={3}>
            {children}
          </Box>
        )}
      </div>
    );
  }
function a11yProps(index) {
    return {
      id: `simple-tab-${index}`,
      'aria-controls': `simple-tabpanel-${index}`,
    };
  }
  
class MetinClientLeftSide extends React.Component {
    constructor(props){
        super(props)
        this.state={
            currentTab: 0
        }
    }

    onChangeCurrentTab = (e, new_tab) => {
        this.setState({
            currentTab: new_tab    
        })
    }

    SelectAnotherCharacter = (client_id) => {
        store.dispatch({'type': 'SELECT_CLIENT', payload: {id: client_id}})
    }

    render = () => {
        let select_clients = this.props.clients.map( (client, _id) => {
            return(<MenuItem value={client.id}> {client.player_name} lvl {client.player_level} </MenuItem>)
        })
        return (
            <Grid container className='metin-client-left-side-container'>
                <Grid item xs={12}>
                    <Paper>
                        <Grid className='client-selector'>
                            <Select
                                value={this.props.selected_client_id}
                                onChange={(e) => this.SelectAnotherCharacter(e.target.value)}
                                className='client-selector-select'
                                >
                                { select_clients }
                            </Select>
                        </Grid>
                        <Grid item xs={12}>
                            <CharacterInfo character_status={this.props.character_status} />
                        </Grid>
                        <Grid>
                        <HackbarAppBar position="static">
                            <HackbarTabs value={this.state.currentTab} onChange={ (e, new_value) => this.onChangeCurrentTab(e, new_value)}
                            variant="scrollable"
                            scrollButtons="auto"
                            aria-label="scrollable"
                            >
                                <Tab label="General" {...a11yProps}/>
                                <Tab label="Pickup" {...a11yProps}/>
                                <Tab label="Waithack" {...a11yProps}/>
                                <Tab label="Fishbot" {...a11yProps}/>
                                <Tab label="Farmbot" {...a11yProps}/>
                                <Tab label="Skillbot" {...a11yProps}/>

                            </HackbarTabs>
                            <TabPanel value={this.state.currentTab} index={0}>
                                <Settings socket={this.props.socket}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={1}>
                                <Pickup socket={this.props.socket}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={2}>
                                <Waithack socket={this.props.socket}/>                         
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={3}>
                                Fishbot
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={4}>
                                <Farmbot socket={this.props.socket}/>
                            </TabPanel>
                            <TabPanel value={this.state.currentTab} index={5}>
                                <Skillbot socket={this.props.socket} />
                            </TabPanel>
                        </HackbarAppBar>
                        </Grid>
                    </Paper>
                </Grid>
            </Grid>
        )
    }
}

class CharacterInfo extends React.Component {

    render = () => {
        if(this.props.character_status.Position){
            return (
                <Grid container justifyContent="center">
                    <Grid item xs={4} >
                        <Typography className='character-info-text'> Server: {this.props.character_status.Server}</Typography>
                    </Grid>
                    <Grid item xs={4}>
                        <Typography className='character-info-text'> Channel: {this.props.character_status.CurrentChannel}</Typography>
                    </Grid>
                    <Grid item xs={4}>
                        <Typography className='character-info-text'> Position: {Math.round(this.props.character_status.Position[0]/100)}|{Math.round(this.props.character_status.Position[1]/100)}</Typography>
                    </Grid>
                    <Grid item xs={4}>
                        <Typography className='character-info-text'> HP: {this.props.character_status.HP / this.props.character_status.MaxHP * 100}%</Typography>
                    </Grid>
                    <Grid item xs={4}>
                        <Typography className='character-info-text'> MP: {this.props.character_status.SP / this.props.character_status.MaxSP * 100}%</Typography>
                    </Grid>
                    <Grid item xs={4}>
                        <Typography className='character-info-text'> ST: {this.props.character_status.Stamina / this.props.character_status.MaxStamina * 100}%</Typography>
                    </Grid>
                </Grid>
            )
        }
        else{
            return (<>character status is not setted</>)
        }

    }
}

function mapStateToProps(state){
    //console.log(state.receivePacketesReducer.character_status)
    return {
        character_status: state.receivePacketesReducer.character_status,
        clients: state.receivePacketesReducer.clients,
        selected_client_id: state.receivePacketesReducer.selected_client_id
    }
}

export default connect(mapStateToProps)(MetinClientLeftSide)