import React from 'react'
import { FixedSizeList } from 'react-window';
import auth  from '../../utils/auth';
import {Redirect} from "react-router";
import {
    Grid,
    Paper,
    Typography,
    TextField,
    Button,
    Dialog,
    DialogTitle,
    MenuItem,
    Select,
    InputLabel,
    ListItem, ListItemText
} from '@material-ui/core';
import './schema_creator.css'
import {HackbarCheckbox} from "../../components/hackbar_style/hackbar_style";

const ACTION_FUNCTION = {
    ClearFloor: {
        name: 'Clear floor',
        description: 'This action allows you to clear area with (x, y) center.',
        args: {
            x: {value: 0, helperText: 'X position'},
            y: {value: 0, helperText: 'y position'},
        },
        needRequirements: false
    },
    DestroyByID: {
        name: 'Destroy',
        description: 'This action allows you to clear area with (x, y) center.',
        args: {
            id: {value: 0, helperText: 'ID of mob'},
        },
        needRequirements: false

    },
    MoveToPosition: {
        name: 'Move to position',
        description: 'This action allows you to clear area with (x, y) center.',
        args:{
            x: {value: 0, helperText: 'X position'},
            y: {value: 0, helperText: 'Y position'},
            map_name: {value: '', helperText: 'Map name'},
        },
        needRequirements: false
    },
    UseItemOnNPC: {
        name: 'Use item on npc',
        description: 'This action allows you to clear area with (x, y) center.',
        args: {
            npc_id: {value: 0, helperText: 'NPC ID'},
            item_slot: {value: 0, helperText: 'Item slot'},
        },
        needRequirements: false
    },
    TalkWithNPC: {
        name: 'Talk with npc',
        description: 'This action allows you to clear area with (x, y) center.',
        args: {
            npc_id: {value: 0, helperText: 'NPC ID'},
            event_answer: {value: [], helperText: 'Answer to npc'},
            map_name: {value: '', helperText: 'Map name'},
        },
        needRequirements: false
    },
    ChangeChannel: {
        name: 'Change channel',
        description: 'This action allows you to clear area with (x, y) center.',
        args: {
            channel_id: {value: 0, helperText: 'Channel ID'},
        },
        needRequirements: false
    },
}

class SchemaCreator extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            schemaName: '',
            schemaStages: [],
            actionCreatorDialog: false,
            chosenStage: -1,
        }

    }
    onAddNewStage = () => {
        let new_stage = {
            actions: []
        }
        let newStages = this.state.schemaStages
        newStages.push(new_stage)
        this.setState({...this.state, schemaStages: newStages})
    }

    onDeleteStage = (index) => {
        let newStages = this.state.schemaStages
        newStages.splice(index, 1)
        this.setState({...this.state, schemaStages: newStages})
    }

    onChangeSchemaName = (event) => {
        this.setState({...this.state, schemaName: event.target.value})
    }

    onOpenActionCreatorDialog = (stage) => {
        this.setState({...this.state, actionCreatorDialog: true, chosenStage: stage})
    }

    onCloseActionCreatorDialog = (action) => {
        console.log(action)
        if(action.type === 'add_new_action'){
            this.addNewAction(action, this.state.chosenStage)
            this.setState({...this.state, actionCreatorDialog: false, chosenStage: -1})
        }
        else{
            this.setState({...this.state, actionCreatorDialog: false, chosenStage: -1})
        }


    }

    renderStages = (props) => {
        const {index, style} = props;
        let list_item = this.renderActions(index)
        return (
            <div>
                <Typography> Stage {index+1} <Button onClick={() => this.onDeleteStage(index)}> - </Button> </Typography>
                <Button onClick={() => this.onOpenActionCreatorDialog(index)}> Add action </Button>
                <FixedSizeList height={200} width={'100%'} itemSize={30} itemCount={this.state.schemaStages[index].actions.length}>
                    {list_item}
                </FixedSizeList>
            </div>

        )
    }

    renderActions = (chosenStage) => {
        return (props) => {
            console.log(props.index)
            const {index, style} = props;
            return (
                <ListItem button key={index} style={style}>
                    <ListItemText primary={this.state.schemaStages[chosenStage].actions[index].function} />
                </ListItem>
            )
        }
    }

    addNewAction = (action, chosenStage) => {
        console.log(action, chosenStage)
        if(action.function === '' || !Object.keys(action.function_args)){
            return
        }
        let new_action = {
            name: action.name,
            function: action.function,
            function_args: action.function_args,
        }
        console.log(new_action)
        let actions = this.state.schemaStages[chosenStage].actions
        actions.push(new_action)
        let all_stages = this.state.schemaStages
        all_stages[chosenStage].actions = actions
        this.setState({...this.state, schemaStages: all_stages})

    }

    render = () => {
        if(!auth.getUserInfo().apiKey){
            return <Redirect to={'/login'}/>
        }
        console.log(this.state.schemaStages)
        return (
            <Grid container id='container' justifyContent='center'>
                <ActionCreatorDialog selectedValue={this.state.action}
                                     open={this.state.actionCreatorDialog}
                                     onclose={this.onCloseActionCreatorDialog}/>
                <Grid item xs={6}>
                    <Paper>
                        <Grid item xs={12}>
                            <TextField helperText={'Name of your new schema'} type={'text'}
                                       value={this.state.schemaName} onChange={(e) => this.onChangeSchemaName(e)}
                                       placeholder={'Example name'} fullWidth={true}/>
                        </Grid>
                        <Grid item xs={12}>
                            <div className={'StagesHeader'}>
                                <Typography> Stages <Button onClick={() => this.onAddNewStage()}> + </Button> </Typography>
                                <FixedSizeList height={600} width={'100%'} itemSize={200} itemCount={this.state.schemaStages.length}>
                                    {this.renderStages}
                                </FixedSizeList>
                            </div>
                        </Grid>

                    </Paper>
                </Grid>



            </Grid>
        )
    }
}


class ActionCreatorDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            type: 'add_new_action',
            name: '',
            function: '',
            function_args: {},
        }
    }
    saveAction = () => {
        console.log(this.state)
        this.props.onclose(this.state)
    }

    onChangeName = (event) => {
        this.setState({...this.state, name: event.target.value})
    }

    handleFunctionChange = (event) => {
        this.setState({...this.state, function: event.target.value})
    }

    setArgValue = (key, value, type_of='string') => {
        let function_args = this.state.function_args
        if(type_of === 'number'){
            function_args[key] = parseInt(value)
        }

        this.setState({...this.state, function_args: function_args})
    }

    renderArgsForm = (function_key) => {
        let inputs = Object.keys(ACTION_FUNCTION[function_key].args).map( (key) => {
            let current_arg = ACTION_FUNCTION[function_key].args[key]
            if(typeof(current_arg.value) === 'number'){
                return (
                    <Grid item xs={12}>
                        <TextField helperText={current_arg.helperText} type={'number'}
                                   onChange={(e) => this.setArgValue(key, e.target.value, 'number')}
                                   defaultValue={current_arg.value}
                                   placeholder={current_arg.value} fullWidth={true}/>
                    </Grid>
                )
            }
            else if(typeof(current_arg.value) === 'string'){
                return (
                    <Grid item xs={12}>
                        <TextField helperText={current_arg.helperText} type={'text'}
                                   onChange={(e) => this.setArgValue(key, e.target.value)}
                                   defaultValue={current_arg.value} key={key}
                                   placeholder={current_arg.value} fullWidth={true}/>
                    </Grid>
                )
            }


        })
        return (
            <>
                <Grid item xs={12}> <p> {ACTION_FUNCTION[this.state.function].description} </p> </Grid>
                {inputs}
            </>
        )
    }

    render = () => {
        return (
            <Grid container justifyContent={'center'}>
                <Dialog open={this.props.open} onClose={this.props.onclose} fullWidth={true}>
                    <DialogTitle> Add new action </DialogTitle>
                    <Grid item xs={12}>
                        <TextField helperText={'Name of your action'} type={'text'}
                                   value={this.state.name} onChange={ e => this.onChangeName(e)}
                                   placeholder={'Example name'} fullWidth={true}/>
                    </Grid>
                    <Grid item xs={12}>
                        <InputLabel id={'function-name-select-label'}> Function </InputLabel>
                        <Select
                        labelId={'function-name-select-label'}
                        value={this.state.function}
                        label={'Function'}
                        onChange={this.handleFunctionChange}
                        fullWidth={true}>
                            {
                                Object.keys(ACTION_FUNCTION).map( (key) => {
                                        return(
                                            <MenuItem value={key}> {ACTION_FUNCTION[key]['name']} </MenuItem>
                                        )
                                })
                            }
                        </Select>
                        { this.state.function && this.renderArgsForm(this.state.function) }
                    </Grid>
                    <Grid item xs={12}>
                        <Button fullWidth={true} onClick={() => this.saveAction()}> Save action </Button>
                    </Grid>
                </Dialog>
            </Grid>
        )
    }

}


export default SchemaCreator