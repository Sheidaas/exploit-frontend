import React from 'react'
import store from '../../store'
import { Typography, MenuItem, Grid, Paper, Select } from '@material-ui/core';
import MetinClientMap from '../../components/MetinClientMap/MetinClientMap';
import MetinClientLeftSide from '../../components/login-register-desc/MetinClientLeftSide/MetinClientLeftSide';
import { connect }from 'react-redux'

class MetinClient extends React.Component {
    constructor(props){
        super(props)
        this.SocketToLocalServer = this.props.socket
        this.state = {
            interval: setInterval(() => {
                this.getFullHackStatus();
                this.getFullCharacterStatus();
                this.getFullInstancesList();
              }, 20),
            }
    }

    getFullCharacterStatus = () => {
        let index = store.getState().receivePacketesReducer.selected_client_id
        store.dispatch({type: 'GET_FULL_CHARACTER_STATUS', client: this.SocketToLocalServer, index: index})

        
    }

    getFullInstancesList = () => {
        let index = store.getState().receivePacketesReducer.selected_client_id
        store.dispatch({type: 'GET_FULL_INSTANCES_LIST', client: this.SocketToLocalServer, index: index})
    }

    getFullHackStatus = () => {
        let index = store.getState().receivePacketesReducer.selected_client_id
        store.dispatch({type: 'GET_FULL_HACK_STATUS', client: this.SocketToLocalServer, index: index})      
    }

    componentDidMount = () => {
        this.getFullHackStatus();
        this.getFullCharacterStatus();
        this.getFullInstancesList();  
    }

    SelectAnotherCharacter = (client_id) => {
        store.dispatch({'type': 'SELECT_CLIENT', payload: {id: client_id}})
    }

    render = () => {
        if(this.props.character_status != undefined){
            let select_clients = this.props.clients.map( (client, _id) => {
                return(<MenuItem value={client.id}> {client.player_name} lvl {client.player_level} </MenuItem>)
            })
            return (
                <Grid container>
                    <Grid item xs={3}>
                        <Grid className='client-selector'>
                            <Select
                                value={this.props.selected_client_id}
                                onChange={(e) => this.SelectAnotherCharacter(e.target.value)}
                                className='client-selector-select'
                                >
                                { select_clients }
                            </Select>
                        </Grid>
                        <MetinClientLeftSide socket={this.SocketToLocalServer} selected_client_id={this.props.selected_client_id} clients={this.props.clients} hack_status={this.props.hack_status}/>
                    </Grid>
                    <Grid item xs={6}>
                        <MetinClientMap socket={this.SocketToLocalServer} hack_status={this.props.hack_status} instances_list={this.props.instances_list} character_status={this.props.character_status}/>
                    </Grid>
                    <Grid item xs={3}>
                        PRAWY PANEL
                    </Grid>
    
    
                </Grid> )
            
        }
        else{
            return (<> Cannot load client </>)
        }
}
}

function mapStateToProps(state){
    //console.log(state.receivePacketesReducer.character_status)
    return {
        instances_list: state.receivePacketesReducer.instances_list,
        character_status: state.receivePacketesReducer.character_status,
        hack_status: state.receivePacketesReducer.hack_status,
        clients: state.receivePacketesReducer.clients,
        selected_client_id: state.receivePacketesReducer.selected_client_id
    }
}

export default connect(mapStateToProps)(MetinClient)