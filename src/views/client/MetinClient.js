import { Grid, MenuItem }  from '@material-ui/core';
import React               from 'react'
import { connect }         from 'react-redux'
import { Redirect }        from 'react-router';
import { HackbarSelect }   from '../../components/hackbar_style/hackbar_style.js'
import MetinClientLeftSide from '../../components/MetinClientLeftSide/MetinClientLeftSide';
import MetinClientMap      from '../../components/MetinClientMap/MetinClientMap';
import store               from '../../store'
import { ACTIONS }         from '../../utils/enums.js'
import './metin_client.css'

class MetinClient extends React.Component {
    constructor( props ) {
        super(props)
        this.SocketToLocalServer = this.props.socket
        this.state = {
            renderMap: true,
            interval: setInterval(() => {
                this.getFullHackStatus();
                this.getFullCharacterStatus();
                this.getFullInstancesList();
            }, 500),
        }
    }

    getFullCharacterStatus = () => {
        let index = store.getState().receivePacketsReducer.selected_client_id
        store.dispatch({ type: ACTIONS.GET_FULL_CHARACTER_STATUS, client: this.SocketToLocalServer, index: index })
    }

    getFullInstancesList = () => {
        let index = store.getState().receivePacketsReducer.selected_client_id
        store.dispatch({ type: ACTIONS.GET_FULL_INSTANCES_LIST, client: this.SocketToLocalServer, index: index })
    }

    getFullHackStatus = () => {
        let index = store.getState().receivePacketsReducer.selected_client_id
        store.dispatch({ type: ACTIONS.GET_FULL_HACK_STATUS, client: this.SocketToLocalServer, index: index })
    }

    componentDidMount = () => {
        this.getFullHackStatus();
        this.getFullCharacterStatus();
        this.getFullInstancesList();
    }

    SelectAnotherCharacter = ( client_id ) => {
        store.dispatch({ 'type': ACTIONS.SELECT_CLIENT, payload: { id: client_id } })
    }

    forceRefresh = () => {
        this.setState({ ...this.state, renderMap: false })
    }

    render = () => {
        if ( this.props.selected_client_id === -1 ) {
            return <Redirect to={ '/dashboard' }/>
        }

        let clients_id = []
        if ( this.props.character_status !== undefined && Object.keys(this.props.character_status) !== 0 ) {
            let select_clients = this.props.clients.map(( client, _id ) => {
                clients_id.push(client.id)
                return ( <MenuItem value={ client.id }> { client.player_name } lvl { client.player_level } </MenuItem> )
            })

            if ( clients_id.includes(this.props.selected_client_id) == false ) {
                store.dispatch({ type: 'UNSELECT_CLIENT', payload: {} })
                return <Redirect to={ '/dashboard' }/>
            }

            return (
                <Grid container className={ "container" }>
                    <Grid item xs={ 12 } md={ 6 } className='client-selector'>
                        <Grid>
                            <HackbarSelect
                                value={ this.props.selected_client_id }
                                onChange={ ( e ) => this.SelectAnotherCharacter(e.target.value) }
                                className='client-selector-select'
                            >
                                { select_clients }
                            </HackbarSelect>
                        </Grid>
                        <MetinClientLeftSide socket={ this.SocketToLocalServer }
                                             selected_client_id={ this.props.selected_client_id }
                                             clients={ this.props.clients } hack_status={ this.props.hack_status }
                                             character_status={ this.props.character_status }
                                             pickup_filter={ this.props.pickup_filter }
                                             item_list={ this.props.item_list }
                                             instances_list={ this.props.instances_list }
                                             language={ this.props.language } icon_names={ this.props.icon_names }
                                             skill_list={ this.props.skill_list }
                                             scanned_shops={ this.props.scanned_shops }
                                             item_types={this.props.item_types}/>
                    </Grid>
                    <Grid item xs={ 12 } md={ 6 }>
                        { this.state.renderMap &&
                        <MetinClientMap
                            socket={ this.SocketToLocalServer }
                            hack_status={ this.props.hack_status }
                            instances_list={ this.props.instances_list }
                            character_status={ this.props.character_status }
                            language={ this.props.language.metinclientmap }
                            forceRefresh={ this.forceRefresh }
                            mobs_list={ this.props.mobs_list }
                            mob_shower_language={ this.props.language.mobshower }
                            item_list={ this.props.item_list }/>
                        }
                        { !this.state.renderMap &&
                        <div>{ this.setState({ ...this.state, renderMap: true }) }</div>
                        }
                    </Grid>
                </Grid> )

        } else {
            return ( <> Cannot load client </> )
        }
    }
}

function mapStateToProps( state ) {
    return {
        instances_list: state.receivePacketsReducer.instances_list,
        character_status: state.receivePacketsReducer.character_status,
        hack_status: state.receivePacketsReducer.hack_status,
        clients: state.receivePacketsReducer.clients,
        selected_client_id: state.receivePacketsReducer.selected_client_id,
        pickup_filter: state.receivePacketsReducer.pickup_filter,
        item_list: state.receivePacketsReducer.server_info.Items,
        mobs_list: state.receivePacketsReducer.server_info.Mobs,
        skill_list: state.receivePacketsReducer.server_info.Skills,
        icon_names: state.receivePacketsReducer.server_info.ItemIcons,
        item_types: state.receivePacketsReducer.server_info.ItemTypes,
        scanned_shops: state.receivePacketsReducer.scanned_shops,
    }
}

export default connect(mapStateToProps)(MetinClient)
