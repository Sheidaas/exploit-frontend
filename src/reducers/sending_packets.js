import { ACTIONS } from '../utils/enums.js'

const PACKETS_PATTERNS = {
    'SET_AS_FRONTEND_CLIENT': {type: 'set_role', data: {message: 'frontend_client'}},
    'GET_METIN_CLIENT_LIST': {type: 'information', data: {message: '', action: ACTIONS.GET_ALL_CONNECTED_METIN_CLIENTS}},
    'GET_FULL_CHARACTER_STATUS': {type: 'information', data: {message: -1, action: ACTIONS.GET_FULL_CHARACTER_STATUS}},
    'GET_FULL_INSTANCES_LIST': {type: 'information', data: {message: -1, action: ACTIONS.GET_FULL_INSTANCES_LIST}},
    'GET_FULL_HACK_STATUS': {type: 'information', data: {message: -1, action: ACTIONS.GET_FULL_HACK_STATUS}},
    'GET_INVENTORY_STATUS': {type: 'update_request', data: {message: -1, action: ACTIONS.GET_INVENTORY_STATUS}},
    'GET_PICKUP_FILTER': {type: 'update_request', data: {message: -1, action: ACTIONS.GET_PICKUP_FILTER}},
    'WALK_TO_POSITION': {type: 'actions', data: {message: [{function_args:0, function: 'MoveToPosition', requirements: {IS_ON_POSITION: [0, 0]}, name:''}], client_id:-1}},
    'UPDATE_ONE_OF_HACK_STATUS': {type: 'update', data: {message: {}, module: 'ONE_OF_HACK_MODULE', client_id: -1}},
    'GET_FULL_SERVER_STATUS': {type: 'information', data: {message: -1, action: ACTIONS.GET_FULL_SERVER_STATUS}},
    'SET_NEW_SCHEMA': {type: 'update_request', data:{message: {}, options: {}, schema:'SCHEMA_NAME', action: ACTIONS.SET_NEW_SCHEMA}}
}

const initial_state = {
    SET_AS_FRONTEND_CLIENT: ACTIONS.SET_AS_FRONTEND_CLIENT,
    GET_METIN_CLIENT_LIST: ACTIONS.GET_METIN_CLIENT_LIST,
    GET_FULL_CHARACTER_STATUS: ACTIONS.GET_FULL_CHARACTER_STATUS,
    GET_FULL_HACK_STATUS: ACTIONS.GET_FULL_HACK_STATUS,
    GET_INVENTORY_STATUS: ACTIONS.GET_INVENTORY_STATUS,
    GET_PICKUP_FILTER: ACTIONS.GET_PICKUP_FILTER,
    GET_FULL_SERVER_STATUS: ACTIONS.GET_FULL_SERVER_STATUS,
    UPDATE_ONE_OF_HACK_STATUS: ACTIONS.UPDATE_ONE_OF_HACK_STATUS,
    WALK_TO_POSITION: ACTIONS.WALK_TO_POSITION,
    SET_NEW_SCHEMA: ACTIONS.SET_NEW_SCHEMA,
}

function handleSetAsFrontendClient(client) {
    console.log(PACKETS_PATTERNS[ACTIONS.SET_AS_FRONTEND_CLIENT])
    clientSafeSend(client, PACKETS_PATTERNS[ACTIONS.SET_AS_FRONTEND_CLIENT]);
}

function HandleGetMetinClientList(client) {
    clientSafeSend(client, PACKETS_PATTERNS[ACTIONS.GET_METIN_CLIENT_LIST]);
}

function HandleWalkToPosition(client, walk_arg, payload) {
    let message = PACKETS_PATTERNS[ACTIONS.WALK_TO_POSITION]
    message.data.message[0].function_args = walk_arg
    message.data.message[0].requirements = {IS_ON_POSITION: [Math.round(walk_arg[0][0]), Math.round(walk_arg[0][1])]}
    message.data.message[0].name = 'Going to ' + Math.round(walk_arg[0][0]).toString() + ':' + Math.round(walk_arg[0][1]).toString()
    message.data.client_id = payload.client_id
    clientSafeSend(client, message);   
}

function HandleGetFullCharacterStatus(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_FULL_CHARACTER_STATUS]
    message.data.message = index
    clientSafeSend(client, message);      
}
function HandleGetInventoryStatus(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_INVENTORY_STATUS]
    message.data.message = index
    clientSafeSend(client, message);      
}
function HandleGetPickupFilter(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_PICKUP_FILTER]
    message.data.message = index
    clientSafeSend(client, message);    
}
function HandleGetFullHackStatus(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_FULL_HACK_STATUS]
    message.data.message = index
    clientSafeSend(client, message);     
}
function HandleGetFullServerStatus(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_FULL_SERVER_STATUS]
    message.data.message = index
    clientSafeSend(client, message);    
}
function HandleGetFullInstancesList(client, index){
    let message = PACKETS_PATTERNS[ACTIONS.GET_FULL_INSTANCES_LIST]
    message.data.message = index
    clientSafeSend(client, message);      
}

function HandleUpdateOneHackModule(client, module_dict, module_name, index){
    let message = PACKETS_PATTERNS[ACTIONS.UPDATE_ONE_OF_HACK_STATUS]
    message.data.message = module_dict
    message.data.module = module_name
    message.data.client_id = index
    clientSafeSend(client, message);     
}

function HandleSetNewSchema(client, metin_id, payload){
    let message = PACKETS_PATTERNS['SET_NEW_SCHEMA']
    message.data.options = payload.message.OPTIONS
    message.data.needed_options = payload.message.NEEDED_OPTIONS
    message.data.message = metin_id
    message.data.schema = payload.name
    console.log(message)
    clientSafeSend(client, message)
}

function clientSafeSend(client, message) {
    try {
        client.send(JSON.stringify(message), receivedData => {});
    } catch (err) {
        //console.log(err);
    }
}

function messagesReducer (state = initial_state, action) {
    //console.log('dipatched')
    switch(action.type){
        case ACTIONS.SET_AS_FRONTEND: {
            //console.log(action.client)
            handleSetAsFrontendClient(action.client)
            return state
        }
        case ACTIONS.GET_METIN_CLIENT_LIST: {
            HandleGetMetinClientList(action.client)
            return state
        }
        case ACTIONS.GET_FULL_CHARACTER_STATUS: {
            HandleGetFullCharacterStatus(action.client, action.index)
            return state
        }
        case ACTIONS.GET_INVENTORY_STATUS: {
            HandleGetInventoryStatus(action.client, action.index)
            return state
        }
        case ACTIONS.GET_PICKUP_FILTER: {
            HandleGetPickupFilter(action.client, action.index)
            return state
        }
        case ACTIONS.GET_FULL_INSTANCES_LIST: {
            HandleGetFullInstancesList(action.client, action.index)
            return state
        }
        case ACTIONS.GET_FULL_HACK_STATUS: {
            HandleGetFullHackStatus(action.client, action.index)
            return state
        }
        case ACTIONS.GET_FULL_SERVER_STATUS: {
            HandleGetFullServerStatus(action.payload.client, action.payload.index)
            return state
        }
        case ACTIONS.UPDATE_ONE_HACK_MODULE:{
            HandleUpdateOneHackModule(action.client, action.payload.module_dict, action.payload.module_name, action.index)
            return state
        }
        case ACTIONS.WALK_TO_POSITION: {
            HandleWalkToPosition(action.client, action.index, action.payload)
            return state
        }
        case ACTIONS.SET_NEW_SCHEMA: {
            HandleSetNewSchema(action.client, action.index, action.payload)
            return state
        }
        default:
            return state
    }
}
export default { messagesReducer, initial_state }

