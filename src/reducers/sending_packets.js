const PACKETS_PATTERNS = {
    'SET_AS_FRONTEND_CLIENT': {type: 'set_role', data: {message: 'frontend_client'}},
    'GET_METIN_CLIENT_LIST': {type: 'information', data: {message: '', action: 'get_all_connected_metin_clients'}},
    'GET_FULL_CHARACTER_STATUS': {type: 'information', data: {message: -1, action: 'get_full_character_status'}},
    'GET_FULL_INSTANCES_LIST': {type: 'information', data: {message: -1, action: 'get_full_instances_list'}},
    'GET_FULL_HACK_STATUS': {type: 'information', data: {message: -1, action: 'get_full_hack_status'}},
    'WALK_TO_POSITION': {type: 'actions', data: {message: [{function_args:0, function: 'MoveToPosition', requirements: {}}], client_id:-1}},
}

const initial_state = {
    set_as_front: 'SET_AS_FRONTEND_CLIENT',
    get_metin_client_list: 'GET_METIN_CLIENT_LIST',
    get_full_character_status: 'GET_FULL_CHARACTER_STATUS',
    get_full_instances_list: 'GET_FULL_INSTANCES_LIST',
    walk_to_position: 'WALK_TO_POSITION',

}

function handleSetAsFrontendClient(client) {
    client.send(JSON.stringify(PACKETS_PATTERNS['SET_AS_FRONTEND_CLIENT']), receivedData => {})
}

function HandleGetMetinClientList(client) {
    client.send(JSON.stringify(PACKETS_PATTERNS['GET_METIN_CLIENT_LIST']), receivedData => {})    
}

function HandleWalkToPosition(client, walk_arg, payload) {
    let message = PACKETS_PATTERNS['WALK_TO_POSITION']
    message.data.message[0].function_args = walk_arg
    message.data.client_id = payload.client_id
    console.log(message.data.client_id)
    client.send(JSON.stringify(message), receivedData => {})    
}

function HandleGetFullCharacterStatus(client, index){
    let message = PACKETS_PATTERNS['GET_FULL_CHARACTER_STATUS']
    message.data.message = index
    client.send(JSON.stringify(message), receivedData => {})      
}

function HandleGetFullHackStatus(client, index){
    let message = PACKETS_PATTERNS['GET_FULL_HACK_STATUS']
    message.data.message = index
    client.send(JSON.stringify(message), receivedData => {})      
}

function HandleGetFullInstancesList(client, index){
    let message = PACKETS_PATTERNS['GET_FULL_INSTANCES_LIST']
    message.data.message = index
    client.send(JSON.stringify(message), receivedData => {})      
}

function messagesReducer (state = initial_state, action) {
    //console.log('dipatched')
    switch(action.type){
        case 'SET_AS_FRONTEND': {
            handleSetAsFrontendClient(action.client)
            return state
        }
        case 'GET_METIN_CLIENT_LIST': {
            HandleGetMetinClientList(action.client)
            return state
        }
        case 'GET_FULL_CHARACTER_STATUS': {
            HandleGetFullCharacterStatus(action.client, action.index)
            return state
        }
        case 'GET_FULL_INSTANCES_LIST': {
            HandleGetFullInstancesList(action.client, action.index)
            return state
        }
        case 'GET_FULL_HACK_STATUS': {
            HandleGetFullHackStatus(action.client, action.index)
            return state
        }
        case 'WALK_TO_POSITION': {
            HandleWalkToPosition(action.client, action.index, action.payload)
            return state
        }
        default:
            return state
    }
}
export default { messagesReducer, initial_state }

