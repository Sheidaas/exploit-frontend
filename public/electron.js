const { app, BrowserWindow } = require('electron')
const {PythonShell} = require('python-shell');
const path = require('path')

const DEBUG = false

function createWindow () {
  // Create the browser window.
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      titleBarStyle: 'hidden',
    }
  })
  if (DEBUG) {
    win.loadURL(`http://localhost:3000`);
  } else {
    win.loadFile(path.join(__dirname, 'index.html'));
  }
}
//load the index.html from a url
let pyshell = new PythonShell(process.resourcesPath + '/metin_local_websocket_server/_websocket.py');

pyshell.on('message', function(message) {
  console.log(message);
})
pyshell.end(function (err) {
  if (err){
    throw err;
  };
})
// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in